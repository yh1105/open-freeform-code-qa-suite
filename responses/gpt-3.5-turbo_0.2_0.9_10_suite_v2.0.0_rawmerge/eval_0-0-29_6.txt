To make sure the second query runs only after the first one is fulfilled, you can use the `useEffect` hook to watch for changes in the `userFulfilled` variable. Once it becomes true, you can run the second query with the `user.id` parameter. Here's the code:

```javascript
const { data: user, isFulfilled: userFulfilled } = useGetUserQuery();
const [userBio, setUserBio] = useState(null);

useEffect(() => {
  if (userFulfilled) {
    const { data } = useGetUserBioQuery(user.id);
    setUserBio(data);
  }
}, [userFulfilled, user.id]);
```

This code uses the `useState` hook to store the result of the second query. The `useEffect` hook watches for changes in `userFulfilled` and `user.id`. Once both are fulfilled, it runs the second query and sets the result to the `userBio` state variable.