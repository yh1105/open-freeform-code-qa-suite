Here's a possible implementation of the `removeComma` function:

```r
removeComma <- function(s) {
  # Find all quoted substrings
  quoted <- regmatches(s, gregexpr("\"[^\"]*\"", s))[[1]]
  
  # Replace commas inside each quoted substring with a placeholder
  for (i in seq_along(quoted)) {
    s <- gsub(quoted[i], gsub(",", "###COMMA###", quoted[i]), s, fixed = TRUE)
  }
  
  # Split the string by commas
  s <- strsplit(s, ", ")[[1]]
  
  # Replace the placeholders with commas inside each quoted substring
  for (i in seq_along(quoted)) {
    s[i] <- gsub("###COMMA###", ",", s[i], fixed = TRUE)
  }
  
  # Return the modified string
  return(paste(s, collapse = ", "))
}
```

Here's how you can use it:

```r
string <- c("1, 2, \"something, else\"", "3, 5, \"more, more, more\"", "6, \"commas, are fun\", \"no, they are not\"")

sapply(string, removeComma)
#[1] "1, 2, \"something else\""                  
#[2] "3, 5, \"more more more\""                  
#[3] "6, \"commas are fun\", \"no they are not\""
```

The function works by first finding all quoted substrings in the input string using a regular expression. It then replaces all commas inside each quoted substring with a placeholder string that is unlikely to appear in the input (in this case, "###COMMA###"). The modified string is then split by commas, and the placeholders are replaced with commas inside each quoted substring. Finally, the modified substrings are concatenated back into a single string.