Here's a possible implementation of the `removeComma` function:

```r
removeComma <- function(s) {
  # Find all quoted substrings
  quoted <- gregexpr("\"[^\"]*\"", s)
  # Loop over each quoted substring
  for (i in seq_along(quoted[[1]])) {
    # Replace commas inside the current quoted substring with a space
    s <- gsub(",", " ", s, fixed = TRUE, 
              from = quoted[[1]][i] + 1, 
              to = quoted[[1]][i + attr(quoted[[1]], "match.length")[i]] - 1)
  }
  return(s)
}
```

This function uses `gregexpr()` to find all quoted substrings in the input string `s`. Then, it loops over each quoted substring and replaces any commas inside it with a space using `gsub()`. The `fixed = TRUE` argument in `gsub()` ensures that commas are matched literally, not as regular expression metacharacters. Finally, the modified string is returned.

Here's how you can use the function with the example input:

```r
string <- c("1, 2, \"something, else\"", 
            "3, 5, \"more, more, more\"", 
            "6, \"commas, are fun\", \"no, they are not\"")

sapply(string, removeComma)
#> [1] "1, 2, \"something else\""                  
#> [2] "3, 5, \"more more more\""                  
#> [3] "6, \"commas are fun\", \"no they are not\""
```

Note that `sapply()` is used to apply the `removeComma()` function to each element of the `string` vector.