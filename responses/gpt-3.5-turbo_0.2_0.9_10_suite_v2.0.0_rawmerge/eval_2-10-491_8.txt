One way to make the code more idiomatic is to use the `filter()` method on `Option` to check the condition and then use the `or()` method to provide a default value if the `Option` is `None` or the inner value does not meet the condition. Here's an example:

```rust
fn main() {
    let mut foo: Option<u8> = None;
    foo = foo.filter(|&val| val < 5).or(Some(5));
}
```

This code checks if the inner value of `foo` is less than 5 using the `filter()` method. If the condition is not met, `filter()` returns `None`, which is then replaced by the default value of `Some(5)` using the `or()` method.

Another way to write this code is to use the `unwrap_or()` method to provide a default value if the `Option` is `None` and then use an `if` statement to check the condition. Here's an example:

```rust
fn main() {
    let mut foo: Option<u8> = None;
    foo = Some(foo.unwrap_or(5)).filter(|&val| val < 5);
    if foo.is_none() {
        foo.replace(5);
    }
}
```

This code uses the `unwrap_or()` method to provide a default value of `5` if `foo` is `None`. Then it uses the `filter()` method to check if the inner value of `foo` is less than 5. If the condition is not met, `filter()` returns `None`, which is then replaced by the default value of `Some(5)` using the `is_none()` and `replace()` methods.

Both of these approaches are more concise and expressive than the original `match` statement.