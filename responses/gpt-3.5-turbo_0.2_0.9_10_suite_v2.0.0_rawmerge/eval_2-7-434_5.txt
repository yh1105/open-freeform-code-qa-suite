The `getDoctrine()` method is indeed deprecated in Symfony 5.2 and will be removed in Symfony 6.0. The reason for this deprecation is to encourage developers to use dependency injection instead of relying on the container directly.

The recommended alternative is to inject the `Doctrine\Persistence\ManagerRegistry` service into your controller and use it to retrieve the `EntityManager` or `ObjectManager` instance.

Here's an example of how to do this:

```php
use Doctrine\Persistence\ManagerRegistry;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;

class MyController extends AbstractController
{
    private $managerRegistry;

    public function __construct(ManagerRegistry $managerRegistry)
    {
        $this->managerRegistry = $managerRegistry;
    }

    public function myAction()
    {
        $entityManager = $this->managerRegistry->getManager();
        // use the EntityManager instance to interact with the database
    }
}
```

In this example, we're injecting the `ManagerRegistry` service into the controller's constructor and storing it in a private property. Then, in the `myAction()` method, we're using the `getManager()` method to retrieve the `EntityManager` instance.

Note that you can also inject the `Doctrine\Persistence\ObjectManager` service instead of the `ManagerRegistry` service if you only need to work with a specific entity manager.