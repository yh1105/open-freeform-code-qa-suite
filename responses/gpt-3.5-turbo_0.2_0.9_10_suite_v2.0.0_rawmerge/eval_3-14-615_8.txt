Yes, you can get the current scroll position of a SwiftUI ScrollView by using the `ScrollViewProxy` and its `contentOffset` method. Here's an example:

```swift
struct ContentView: View {
    @State private var scrollOffset: CGPoint = .zero
    var body: some View {
        ScrollView {
            VStack(spacing: 20) {
                ForEach(0..<50) { index in
                    Text("Item \(index)")
                        .frame(width: 200, height: 50)
                }
            }
            .background(
                GeometryReader { proxy in
                    Color.clear
                        .preference(key: ScrollViewOffsetPreferenceKey.self, value: proxy.contentOffset)
                }
            )
        }
        .onPreferenceChange(ScrollViewOffsetPreferenceKey.self) { value in
            self.scrollOffset = value
        }
    }
}

struct ScrollViewOffsetPreferenceKey: PreferenceKey {
    static var defaultValue: CGPoint = .zero
    static func reduce(value: inout CGPoint, nextValue: () -> CGPoint) {
        value = nextValue()
    }
}
```

In this example, we're using a `ScrollView` with a `VStack` of `Text` views. We're also adding a `GeometryReader` as a background to the `VStack` to get the `contentOffset` of the `ScrollView`. We're then using a custom `PreferenceKey` to store the `contentOffset` value and update the `scrollOffset` state variable whenever it changes.