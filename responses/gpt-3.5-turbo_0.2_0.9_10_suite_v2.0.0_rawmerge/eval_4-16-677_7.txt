The issue with your script is that the variable `$searchT` is enclosed in single quotes within the `if` statement. This means that the variable will not be expanded and the `grep` command will search for the literal string '$searchT' instead of the value of the variable.

To fix this, you can replace the single quotes with double quotes like this:

```
if [[ $(cat test.txt | grep -wi "$searchT") ]]; then
```

This will allow the variable to be expanded and the `grep` command will search for the value of the variable.

Also, you can simplify your script by using command substitution instead of piping the output of `cat` to `grep` and `wc`. Here's the updated script:

```
#!/bin/bash
read -p "enter search term here: " searchT

if grep -wi "$searchT" test.txt; then
    echo "$(grep -w "$searchT" test.txt | wc -l) number of matches found"
    grep "$searchT" test.txt
else
    echo "no match found"
fi

exit 0
```

In this version, the `grep` command is used directly in the `if` statement and the output is captured using command substitution. The `wc` command is used to count the number of matches and the `grep` command is used again to display the matches.