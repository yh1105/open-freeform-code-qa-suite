The reason why you are seeing the logs in that order is because the `onItemSelectedListener` is triggered when the user selects an item from the spinner, which happens after the function has already returned the initial value of `itemSelected`.

To fix this, you can use a callback function to return the selected item instead of returning it directly from the function. Here's an example:

```
fun Spinner.setupListWithAdapter(list: MutableList<String>, callback: (String) -> Unit) {
    val adapter = ArrayAdapter(context, android.R.layout.simple_spinner_item, list)
    adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
    this.adapter = adapter
    this.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {
        override fun onItemSelected(p0: AdapterView<*>?, p1: View?, p2: Int, p3: Long) {
            val itemSelected = list[p2]
            Log.e("categoryLog","1 : " + itemSelected)
            callback(itemSelected)
        }
        override fun onNothingSelected(p0: AdapterView<*>?) {
        }
    }
}
```

In this updated function, we are passing a callback function as a parameter. When an item is selected from the spinner, we call this callback function with the selected item as the argument. This way, the selected item is returned to the caller of the function instead of being returned directly from the function.

To use this updated function, you can do something like this:

```
spinner.setupListWithAdapter(list) { selectedItem ->
    // Do something with the selected item
}
```

In this example, we are passing a lambda function as the callback. This lambda function takes the selected item as a parameter and can be used to perform any actions you need with the selected item.