Sure, here's a function that should do what you're asking for using `openpyxl`:

```python
import openpyxl

def filterExcelRows(filePath, matchedString):
    # Load the workbook
    workbook = openpyxl.load_workbook(filePath)
    # Select the sheet
    sheet = workbook['Sheet1']
    # Initialize an empty list to store the row indexes
    row_indexes = []
    # Iterate over all the rows in the sheet
    for row in sheet.iter_rows():
        # Iterate over all the cells in the row
        for cell in row:
            # Check if the cell contains the matched string
            if matchedString in str(cell.value):
                # If it does, add the row index to the list
                row_indexes.append(row[0].row)
                # Iterate over all the cells in the row and print their values
                for cell in row:
                    print(cell.value)
                # Add a separator between rows
                print('---')
    # Return the list of row indexes
    return row_indexes
```

This function loads the Excel workbook, selects the `Sheet1` sheet, and then iterates over all the rows and cells in the sheet. For each cell, it checks if the cell contains the matched string. If it does, it adds the row index to the `row_indexes` list and prints the values of all the cells in the row. Finally, it returns the list of row indexes.

You can call this function like this:

```python
row_indexes = filterExcelRows('example.xlsx', 'ABC')
print(row_indexes)
```

This will search the `example.xlsx` file for cells containing the string `'ABC'`, print the values of all the cells in the rows that contain the string, and return a list of the row indexes.