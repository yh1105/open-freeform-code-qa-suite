To change the background color of the root element dynamically with React, you can use the `ThemeProvider` component provided by Material-UI. 

Here's an example of how you can use it to switch between a light and dark theme:

```jsx
import React, { useState } from 'react';
import { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';
import CssBaseline from '@material-ui/core/CssBaseline';
import Switch from '@material-ui/core/Switch';

function App() {
  const [darkMode, setDarkMode] = useState(false);

  const theme = createMuiTheme({
    palette: {
      type: darkMode ? 'dark' : 'light',
    },
  });

  const handleThemeChange = () => {
    setDarkMode(!darkMode);
  };

  return (
    <ThemeProvider theme={theme}>
      <CssBaseline />
      <div style={{ backgroundColor: theme.palette.background.default }}>
        <Switch checked={darkMode} onChange={handleThemeChange} />
        <h1>Hello World</h1>
      </div>
    </ThemeProvider>
  );
}

export default App;
```

In this example, we're using the `createMuiTheme` function to create a theme object with a `palette` property that specifies the type of palette (either `'light'` or `'dark'`) based on the `darkMode` state. 

We're also using the `CssBaseline` component to apply some basic styles to the document, such as setting the font family and removing margins.

Finally, we're wrapping our app in the `ThemeProvider` component and passing in the `theme` object we created. This will apply the theme to all Material-UI components within the app.

Note that we're also setting the background color of the root element using the `backgroundColor` style property and the `palette.background.default` value from the theme object. This will ensure that the background color changes dynamically when the theme is switched.