In Rust, a `Box` cannot be null. Instead, you can use an `Option<Box<Node>>` to represent a nullable pointer. Here's an example implementation of a stack using `Option<Box<Node>>`:

```rust
struct Node {
    value: i32,
    next: Option<Box<Node>>,
}

struct Stack {
    top: Option<Box<Node>>,
}

impl Stack {
    fn push(&mut self, value: i32) {
        let new_node = Box::new(Node {
            value: value,
            next: self.top.take(),
        });
        self.top = Some(new_node);
    }

    fn pop(&mut self) -> Option<i32> {
        self.top.take().map(|node| {
            self.top = node.next;
            node.value
        })
    }
}
```

In this implementation, `self.top` is an `Option<Box<Node>>` that is initially set to `None`. When pushing a value onto the stack, a new `Box<Node>` is created with the given value and the current `self.top` as its `next` field. The `take` method is used to replace `self.top` with `None` temporarily, allowing ownership of the current `self.top` to be moved into the new node's `next` field. Finally, the new node is set as the new `self.top`.

When popping a value from the stack, the current `self.top` is taken and mapped to an `Option<i32>` using the `map` method. If `self.top` is `None`, the result is `None`. Otherwise, the `next` field of the current `self.top` is set as the new `self.top`, and the value of the current `self.top` is returned.