You can create a factory method that returns a `ServiceBusSender` instance for a given queue name. Here's an example:

```c#
public interface IServiceBusSenderFactory
{
    ServiceBusSender Create(string queueName);
}

public class ServiceBusSenderFactory : IServiceBusSenderFactory
{
    private readonly ServiceBusClient _serviceBusClient;

    public ServiceBusSenderFactory(ServiceBusClient serviceBusClient)
    {
        _serviceBusClient = serviceBusClient;
    }

    public ServiceBusSender Create(string queueName)
    {
        return _serviceBusClient.CreateSender(queueName);
    }
}
```

Then, you can register the `IServiceBusSenderFactory` as a singleton in your DI container:

```c#
_services.AddSingleton<IServiceBusSenderFactory, ServiceBusSenderFactory>();
```

Finally, you can inject the `IServiceBusSenderFactory` into your `CarReservationMessagingService` and use it to create `ServiceBusSender` instances for different queues:

```c#
public class CarReservationMessagingService
{
    private readonly IServiceBusSenderFactory _serviceBusSenderFactory;

    public CarReservationMessagingService(IServiceBusSenderFactory serviceBusSenderFactory)
    {
        _serviceBusSenderFactory = serviceBusSenderFactory;
    }

    public async Task PublishNewCarReservationMessageAsync(CarReservation carReservation, string queueName)
    {
        var carReservationIntegrationMessage = new CarReservationIntegrationMessage
        {
            Id = Guid.NewGuid().ToString(),
            CarId = carReservation.CarId,
            CustomerId = carReservation.CustomerId,
            RentFrom = carReservation.RentFrom,
            RentTo = carReservation.RentTo
        };

        var serializedMessage = JsonSerializer.Serialize(carReservationIntegrationMessage);
        ServiceBusMessage message = new ServiceBusMessage(serializedMessage);

        var sender = _serviceBusSenderFactory.Create(queueName);
        await sender.SendMessageAsync(message);
    }
}
```

Now, you can use `CarReservationMessagingService` to publish messages to different queues by passing the queue name as a parameter to the `PublishNewCarReservationMessageAsync` method.