The reason why you are seeing the logs in that order is because the `onItemSelectedListener` is triggered when the user selects an item from the spinner, which happens after the function has already returned the initial value of `itemSelected`. 

To fix this, you can change the return type of the function to `Unit` and use a callback to pass the selected item back to the calling code. Here's an example:

```
fun Spinner.setupListWithAdapter(list: MutableList<String>, onItemSelected: (String) -> Unit) {
    val adapter = ArrayAdapter(context, android.R.layout.simple_spinner_item, list)
    adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
    this.adapter = adapter
    this.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {
        override fun onItemSelected(p0: AdapterView<*>?, p1: View?, p2: Int, p3: Long) {
            val itemSelected = list[p2]
            Log.e("categoryLog","1 : " + itemSelected)
            onItemSelected(itemSelected)
        }
        override fun onNothingSelected(p0: AdapterView<*>?) {
        }
    }
}
```

In this updated function, we pass in a callback function `onItemSelected` that takes a `String` parameter. When an item is selected from the spinner, we call this callback function with the selected item.

To use this function, you can do something like this:

```
spinner.setupListWithAdapter(listOf("Item 1", "Item 2", "Item 3")) { selectedItem ->
    // Do something with the selected item
    Log.e("categoryLog", "Selected item: $selectedItem")
}
```

In this example, we pass in a list of items to the `setupListWithAdapter` function, and provide a lambda expression as the `onItemSelected` callback. When an item is selected from the spinner, the lambda expression is called with the selected item, which we can then use in our code.