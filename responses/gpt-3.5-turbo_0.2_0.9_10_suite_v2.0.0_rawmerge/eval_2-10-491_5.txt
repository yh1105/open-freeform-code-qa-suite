One way to express this more idiomatically is to use the `Option::filter()` method, which returns `None` if the inner value does not meet the condition, or `Some(inner_value)` otherwise. Here's an example:

```rust
fn main() {
    let mut foo: Option<u8> = None;
    if let Some(foo_val) = foo.filter(|&val| val < 5) {
        // do something with foo_val
    } else {
        foo.replace(5);
    }
}
```

Another way is to use the `Option::map_or_else()` method, which takes two closures: one to handle the `None` case, and one to handle the `Some(inner_value)` case. Here's an example:

```rust
fn main() {
    let mut foo: Option<u8> = None;
    foo = foo.map_or_else(|| Some(5), |val| if val < 5 { /* do something with val */ Some(val) } else { None });
}
```

Finally, you can use the `Option::and_then()` method, which is similar to `map_or_else()`, but returns `None` if the closure returns `None`, or `Some(new_inner_value)` otherwise. Here's an example:

```rust
fn main() {
    let mut foo: Option<u8> = None;
    foo = foo.and_then(|val| if val < 5 { /* do something with val */ Some(val) } else { None }).or(Some(5));
}
```