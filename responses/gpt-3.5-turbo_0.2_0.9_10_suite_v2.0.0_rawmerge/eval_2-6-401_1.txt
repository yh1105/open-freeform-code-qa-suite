You can create a factory method that creates and returns a `ServiceBusSender` instance for a given queue name. Then, you can register this factory method as a singleton service in the DI container. Finally, you can inject the `IServiceProvider` into your `CarReservationMessagingService` and use it to resolve the appropriate `ServiceBusSender` instance based on the queue name.

Here's an example implementation:

1. Create a factory method that creates and returns a `ServiceBusSender` instance for a given queue name:
```c#
private ServiceBusSender CreateServiceBusSender(string queueName)
{
    var serviceBusConfiguration = _options.Value;

    var serviceBusClient = new ServiceBusClient(serviceBusConfiguration.ServiceBusConnectionString, new ServiceBusClientOptions
    {
        TransportType = ServiceBusTransportType.AmqpWebSockets
    });

    return serviceBusClient.CreateSender(queueName);
}
```

2. Register the factory method as a singleton service in the DI container:
```c#
foreach (var queueName in queueNames)
{
    _services.AddSingleton<Func<ServiceBusSender>>(serviceProvider => () => serviceProvider.GetService<ServiceBusSender>(queueName));
    _services.AddSingleton(serviceProvider => CreateServiceBusSender(queueName)).AddSingleton<IServiceBusSender>();
}
```

3. Inject the `IServiceProvider` into your `CarReservationMessagingService` and use it to resolve the appropriate `ServiceBusSender` instance based on the queue name:
```c#
public CarReservationMessagingService(IServiceProvider serviceProvider)
{
    _serviceBusSenders = queueNames.ToDictionary(queueName => queueName, queueName => serviceProvider.GetService<Func<ServiceBusSender>>()());
}

public async Task PublishNewCarReservationMessageAsync(string queueName, CarReservation carReservation)
{
    var carReservationIntegrationMessage = new CarReservationIntegrationMessage
    {
        Id = Guid.NewGuid().ToString(),
        CarId = carReservation.CarId,
        CustomerId = carReservation.CustomerId,
        RentFrom = carReservation.RentFrom,
        RentTo = carReservation.RentTo
    };

    var serializedMessage = JsonSerializer.Serialize(carReservationIntegrationMessage);
    ServiceBusMessage message = new ServiceBusMessage(serializedMessage);
    await _serviceBusSenders[queueName].SendMessageAsync(message);
}
```

Note that this implementation assumes that you have a list of queue names (`queueNames`) that you want to create `ServiceBusSender` instances for. You can modify this implementation