Yes, you can use an object to store all the values and update them using a single `changeHandler` function. Here's an example:

```javascript
const [allValues, setAllValues] = useState({
  mobile: '',
  username: '',
  email: '',
  password: '',
  confirmPassword: ''
});

const changeHandler = e => {
  const { name, value } = e.target;
  setAllValues(prevState => ({
    ...prevState,
    [name]: value
  }));
};

return (
  <input
    type="text"
    className="form-control"
    id="mobile"
    name="mobile"
    placeholder="Enter a valid mobile number"
    value={allValues.mobile}
    onChange={changeHandler}
  />
  // ...
);
```

In the `changeHandler` function, we destructure the `name` and `value` properties from the `e.target` object. Then, we use the spread operator to create a new object with all the previous values from `allValues`, and update the value of the property with the corresponding `name` using square bracket notation. Finally, we pass this new object to `setAllValues` to update the state.

By using this approach, you can reduce the amount of code needed to handle multiple input fields and make it easier to manage the state of your form.