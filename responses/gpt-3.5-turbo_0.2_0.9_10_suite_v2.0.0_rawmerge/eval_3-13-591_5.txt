The reason why you are seeing the logs in that order is because the `onItemSelectedListener` is triggered only when an item is selected in the spinner. So, when you call the `setupListWithAdapter` function, the spinner is set up with the adapter and the `onItemSelectedListener` is also set up. However, since no item has been selected yet, the `onItemSelected` function is not called yet and the `itemSelected` variable remains empty. That's why you see the log with `itemSelected` being empty first.

To fix this, you can change the return type of the function to `Unit` and use a callback to return the selected item to the calling function. Here's an example:

```
fun Spinner.setupListWithAdapter(list: MutableList<String>, onItemSelected: (String) -> Unit) {
    val adapter = ArrayAdapter(context, android.R.layout.simple_spinner_item, list)
    adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
    this.adapter = adapter
    this.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {
        override fun onItemSelected(p0: AdapterView<*>?, p1: View?, p2: Int, p3: Long) {
            val itemSelected = list[p2]
            onItemSelected(itemSelected)
        }
        override fun onNothingSelected(p0: AdapterView<*>?) {
        }
    }
}
```

In this code, we have changed the return type to `Unit` and added a new parameter `onItemSelected` which is a callback function that takes a `String` parameter. Inside the `onItemSelected` function, we get the selected item from the list and pass it to the `onItemSelected` callback.

To use this function, you can call it like this:

```
spinner.setupListWithAdapter(list) { selectedItem ->
    // Do something with the selected item
    Log.e("categoryLog", selectedItem)
}
```

In this code, we pass a lambda function as the `onItemSelected` parameter which takes the selected item as a parameter and logs it. You can replace the logging code with your own logic to handle the selected item.