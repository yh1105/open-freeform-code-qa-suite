In your script, you are using single quotes around the `$searchT` variable in the `grep` command. Single quotes prevent variable expansion, so the `grep` command is searching for the literal string `$searchT` instead of the value of the variable.

To fix this, you can use double quotes around the `grep` command instead of single quotes. This will allow the variable to be expanded and the `grep` command will search for the value of the variable.

Here's the updated script:

```
#!/bin/bash
read -p "enter search term here: " searchT

if grep -wi "$searchT" test.txt >/dev/null; then     
    echo "$(grep "$searchT" test.txt | wc -l) number of matches found"
    grep "$searchT" test.txt
else 
    echo "no match found"    
fi

exit 0
```

In this updated script, we are using the `grep` command directly in the `if` statement instead of using command substitution. We are also redirecting the output of the `grep` command to `/dev/null` to suppress the output.

If the `grep` command finds a match, it will return a success status (0) and the `if` statement will be true. If there is no match, the `grep` command will return a failure status (non-zero) and the `else` statement will be executed.