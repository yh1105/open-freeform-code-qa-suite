To connect to Heroku Redis using TLS on Node, you should use the `REDIS_TLS_URL` environment variable instead of `REDIS_URL`. Here's an example code snippet using `node_redis` v3:

```javascript
const redis = require('redis');
const url = require('url');

const redisUrl = url.parse(process.env.REDIS_TLS_URL);
const client = redis.createClient(redisUrl.port, redisUrl.hostname, {
  tls: {
    rejectUnauthorized: false
  }
});

client.auth(redisUrl.auth.split(":")[1]);
client.on('connect', () => {
  console.log('Connected to Redis');
});

client.on('error', (err) => {
  console.error('Redis error:', err);
});
```

In this example, we're using the `url` module to parse the `REDIS_TLS_URL` environment variable and extract the hostname, port, and authentication credentials. We're also passing an options object to the `createClient` method to enable TLS and disable certificate validation (`rejectUnauthorized: false`). Finally, we're authenticating the client with the password extracted from the `REDIS_TLS_URL` environment variable.

Note that disabling certificate validation is not recommended in production environments, as it can leave your application vulnerable to man-in-the-middle attacks. Instead, you should obtain the root certificate for your Redis instance and use it to validate the server's certificate.