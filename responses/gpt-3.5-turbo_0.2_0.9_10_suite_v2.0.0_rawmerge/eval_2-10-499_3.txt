In Rust, you can set a field in a struct with an empty value by using the `Default` trait. The `Default` trait provides a default value for a type. You can implement the `Default` trait for your `FistClient` struct and set the default value for the `conn` field. Here's how you can do it:

```rust
use std::net::TcpStream;

pub struct FistClient {
    addr: String,
    conn: TcpStream,
}

impl Default for FistClient {
    fn default() -> Self {
        FistClient {
            addr: String::new(),
            conn: TcpStream::connect("0.0.0.0:0").unwrap(),
        }
    }
}

impl FistClient {
    pub fn new(ip: &str, port: &str) -> Self {
        let mut client = FistClient::default();
        client.addr = String::from(ip) + ":" + &String::from(port);
        client
    }

    pub fn connect(&mut self) {
        let res = TcpStream::connect(&self.addr);
        match res {
            Ok(c) => self.conn = c,
            Err(_) => panic!(),
        }
    }
}
```

In the `default` method, we set the default value for the `addr` field to an empty string and the `conn` field to a default value of `TcpStream::connect("0.0.0.0:0").unwrap()`. In the `new` method, we create a new instance of `FistClient` using the `default` method and then set the `addr` field to the provided IP and port.