The reason why the access times are different is because the `match` statement in Python is not implemented as a lookup table. Instead, it is implemented as a series of if-else statements. 

When you use the `match` statement, Python checks each case in order until it finds a match. If it doesn't find a match, it executes the default case. This means that the time it takes to execute the `match` statement depends on the position of the matching case.

In your example, the first case (`case '0'`) is the fastest because it is the first case to be checked. The last case (`case _:`) is the slowest because it is only executed if none of the other cases match. 

If you want to have equal access times, you can use a lookup table, such as a dictionary. This will ensure that the time it takes to access each case is constant, regardless of the position of the matching case.