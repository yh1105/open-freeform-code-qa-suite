Yes, there is a simpler way to remove duplicate elements from an array in Rust. You can use the `dedup` method of the `Vec` type to remove consecutive duplicate elements from a sorted vector. Here's an example:

```rust
let mut arr = [1, 2, 2, 3, 3, 3];
arr.sort();
arr.dedup();
println!("{:?}", arr); // prints [1, 2, 3]
```

If you don't want to sort the array, you can use a `HashSet` to keep track of the elements you've already seen:

```rust
use std::collections::HashSet;

let arr = [1, 2, 2, 3, 3, 3];
let mut set = HashSet::new();
let mut arr2 = Vec::new();
for &x in &arr {
    if set.insert(x) {
        arr2.push(x);
    }
}
println!("{:?}", arr2); // prints [1, 2, 3]
```

This approach has the advantage of preserving the original order of the elements in the array.