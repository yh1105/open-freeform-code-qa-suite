Here's a possible implementation of the `removeComma` function:

```r
removeComma <- function(s) {
  # Find all quoted substrings
  quoted <- gregexpr("\"[^\"]*\"", s)
  # Loop over each quoted substring
  for (i in seq_along(quoted[[1]])) {
    # Extract the substring
    substring <- substr(s, quoted[[1]][i], attr(quoted[[1]], "match.length")[i] + quoted[[1]][i] - 1)
    # Remove commas inside the substring
    substring <- gsub(",", "", substring)
    # Replace the original substring with the modified one
    s <- sub(substring, gsub("\"", "", substring), s)
  }
  return(s)
}
```

Here's how you can use it:

```r
string <- c("1, 2, \"something, else\"", "3, 5, \"more, more, more\"", "6, \"commas, are fun\", \"no, they are not\"")

lapply(string, removeComma)
#[[1]]
#[1] "1, 2, \"something else\""
#
#[[2]]
#[1] "3, 5, \"more more more\""
#
#[[3]]
#[1] "6, \"commas are fun\", \"no they are not\""
```

The function uses `gregexpr()` to find all quoted substrings in the input string. It then loops over each substring, removes the commas inside it using `gsub()`, and replaces the original substring with the modified one using `sub()`. Finally, it returns the modified string.