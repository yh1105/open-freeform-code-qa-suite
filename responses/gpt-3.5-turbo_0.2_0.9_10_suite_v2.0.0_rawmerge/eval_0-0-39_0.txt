Yes, you can achieve this by using refs in React. You can create a ref in the parent component and pass it as a prop to the child component. Then, you can attach the ref to the form element in the child component. Finally, you can add an onClick event to the button in the parent component that triggers the form submission using the ref.

Here's an updated code example that demonstrates this approach:

```javascript
import React, { Component } from "react";
import ReactDOM from "react-dom";

class CustomForm extends Component {
  render() {
    return (
      <form ref={this.props.formRef} id='my-form' onSubmit={() => alert('Form submitted!')}>
        <button type='submit'>Inside Custom</button>
      </form>
    );
  }
}

class App extends Component {
  constructor(props) {
    super(props);
    this.formRef = React.createRef();
  }

  handleSubmit = () => {
    this.formRef.current.submit();
  };

  render() {
    return (
      <div>
        <CustomForm formRef={this.formRef} />
        <button onClick={this.handleSubmit}>In Root</button>
      </div>
    );
  }
}

const rootElement = document.getElementById("root");
ReactDOM.render(<App />, rootElement);
```

In this example, we create a ref using `React.createRef()` in the parent component's constructor. We then pass this ref as a prop to the `CustomForm` component, where we attach it to the form element using the `ref` attribute.

In the parent component's `handleSubmit` method, we call the `submit` method on the ref to trigger the form submission. We attach this method to the `onClick` event of the 'In Root' button.

With this setup, clicking either the 'Inside Custom' button or the 'In Root' button will trigger the form submission.