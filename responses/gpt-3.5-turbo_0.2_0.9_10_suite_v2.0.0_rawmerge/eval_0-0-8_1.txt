Sure, here's the implementation of the `findObject` function in JavaScript:

```javascript
function findObject(id, root_node) {
  if (root_node.id === id) {
    return root_node;
  } else {
    for (let i = 0; i < root_node.child.length; i++) {
      const result = findObject(id, root_node.child[i]);
      if (result) {
        return result;
      }
    }
  }
}
```

This function takes two arguments: `id` and `root_node`. `id` is the ID of the object we want to find, and `root_node` is the root node of the nested object tree.

The function checks if the `id` of the `root_node` matches the `id` we're looking for. If it does, it returns the `root_node`. If it doesn't, it recursively calls itself on each child node of the `root_node` until it finds the object with the matching `id`.

Note that this implementation assumes that the `child` property of each node is an array. If it's not, you'll need to modify the code accordingly.