Yes, you can get the current scroll position of a SwiftUI ScrollView by using the `ScrollViewProxy` and its `contentOffset` property. Here's an example:

```swift
struct ContentView: View {
    @State private var scrollOffset: CGPoint = .zero
    var body: some View {
        ScrollView {
            VStack(spacing: 20) {
                ForEach(0..<50) { index in
                    Text("Item \(index)")
                        .frame(width: 200, height: 50)
                }
            }
        }
        .onPreferenceChange(ScrollViewOffsetPreferenceKey.self) { value in
            self.scrollOffset = value
        }
    }
}

struct ScrollViewOffsetPreferenceKey: PreferenceKey {
    static var defaultValue: CGPoint = .zero
    static func reduce(value: inout CGPoint, nextValue: () -> CGPoint) {
        value = nextValue()
    }
}

struct ScrollViewReaderExample: View {
    @State private var scrollToIndex: Int?
    var body: some View {
        VStack {
            Button("Get Scroll Position") {
                print("Current Scroll Position: \(scrollOffset)")
            }
            Button("Scroll to Item 25") {
                scrollToIndex = 25
            }
        }
        .overlay(
            ScrollViewReader { proxy in
                ScrollView {
                    VStack(spacing: 20) {
                        ForEach(0..<50) { index in
                            Text("Item \(index)")
                                .frame(width: 200, height: 50)
                                .id(index)
                        }
                    }
                    .onChange(of: scrollToIndex) { index in
                        if let index = index {
                            withAnimation {
                                proxy.scrollTo(index, anchor: .top)
                            }
                        }
                    }
                    .background(GeometryReader {
                        Color.clear.preference(key: ScrollViewOffsetPreferenceKey.self, value: proxy.contentOffset)
                    })
                }
            }
        )
    }
}
```

In this example, we use a `ScrollViewReader` to get access to the `ScrollViewProxy`. We then use the `ScrollViewOffsetPreferenceKey` to get the current scroll offset and store it in the `scrollOffset` state variable. Finally, we use a button to print the current scroll position and another button to scroll to a specific item in the list.