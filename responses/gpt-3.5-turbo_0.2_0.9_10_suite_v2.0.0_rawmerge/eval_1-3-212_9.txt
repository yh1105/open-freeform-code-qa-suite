Here are the modified classes `M` and `M3D`:

```python
from __future__ import annotations
from typing import TypeVar, Generic

T = TypeVar('T', bound='M')

class M(Generic[T]):
    def set_width(self: T, width: int) -> T:
        self.width = width
        return self

    def set_height(self: T, height: int) -> T:
        self.height = height
        return self


class M3D(M[M3D]):
    def set_depth(self, depth: int) -> M3D:
        self.depth = depth
        return self
```

The key change is to make `M` a generic class with a type parameter `T` that is bound to `M` or a subclass of `M`. Then, the return type of `set_width()` and `set_height()` is `T` instead of `M`. This allows the return type to be the subclass type when called on a subclass instance.

In `M3D`, we specify that `M3D` is a subclass of `M[M3D]`, which means that `T` is bound to `M3D` in `M` when `M3D` is used. This allows `set_width()` and `set_height()` to return `M3D` instead of `M` when called on an `M3D` instance.

With these changes, `cube = M3D().set_width(2).set_height(3).set_depth(5)` works as expected.