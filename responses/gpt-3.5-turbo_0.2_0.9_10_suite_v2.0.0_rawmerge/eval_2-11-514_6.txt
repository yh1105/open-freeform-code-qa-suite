Here is an implementation of the `fun` function that meets the requirements:

```c++
#include <array>

template <uint32_t argsCount, typename T>
void fun(T ...args)
{
    static_assert(sizeof...(args) == argsCount * 3, "Incorrect number of arguments");

    std::array<T, argsCount> arr{ args... };

    // Do something with the array...
}
```

Explanation:
- The function takes a template parameter `argsCount` which specifies the number of arguments expected.
- The function also takes a template parameter `T` which specifies the type of the arguments.
- The function uses a static assertion to ensure that the number of arguments passed in is correct (i.e. `sizeof...(args)` should be equal to `argsCount * 3` since each argument is a `Foo` struct with 3 members).
- The function creates a `std::array` of type `T` with size `argsCount` and initializes it with the arguments using the fold expression `args...`.
- The array can then be used as needed within the function.