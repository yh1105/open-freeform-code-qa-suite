Here is an implementation of the `fun` function that meets the given constraints:

```c++
#include <array>

template <uint32_t argsCount, typename T>
void fun(T ...args)
{
    static_assert(sizeof...(args) == argsCount * 3, "Incorrect number of arguments");

    std::array<T, argsCount> arr{ args... };

    // Do something with the array
}
```

Explanation:
- The function takes a template parameter `argsCount` which specifies the number of arguments expected.
- The function takes a variadic template parameter `T ...args` which accepts multiple instances of the `T` type (in this case, `Foo`).
- A static assertion is used to ensure that the number of arguments passed in is correct. Since each instance of `Foo` has three members, the total number of arguments should be `argsCount * 3`.
- An `std::array` is created with the specified size `argsCount`, and the variadic arguments are used to initialize the array. The `args...` syntax expands the variadic arguments into a comma-separated list of arguments that can be used to initialize the array.
- The array can then be used as needed within the function.