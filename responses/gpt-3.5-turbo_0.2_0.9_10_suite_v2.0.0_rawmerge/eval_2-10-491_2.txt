One way to make this code more idiomatic is to use the `map_or_else` method of `Option`. Here's an example:

```rust
fn main() {
    let mut foo: Option<u8> = None;
    foo = foo.map_or_else(|| Some(5), |val| if val < 5 { Some(5) } else { None });
}
```

This code uses `map_or_else` to check if `foo` is `None`. If it is, it returns `Some(5)`, which replaces the value of `foo`. If `foo` is `Some`, it checks if the value meets the condition. If it does, it returns `None`, which leaves `foo` unchanged. If it doesn't, it returns `Some(5)`, which replaces the value of `foo`.

Another way to make this code more idiomatic is to use the `and_then` method of `Option`. Here's an example:

```rust
fn main() {
    let mut foo: Option<u8> = None;
    foo = foo.and_then(|val| if val < 5 { Some(5) } else { None });
}
```

This code uses `and_then` to check if `foo` is `Some` and if the value meets the condition. If it does, it returns `Some(5)`, which replaces the value of `foo`. If it doesn't, it returns `None`, which leaves `foo` unchanged.

Finally, you can also use the `unwrap_or_else` method of `Option` to replace the value of `foo` if it is `None`. Here's an example:

```rust
fn main() {
    let mut foo: Option<u8> = None;
    foo = Some(5).filter(|&val| foo.map_or(true, |foo_val| foo_val < 5));
}
```

This code uses `filter` to check if the value of `Some(5)` meets the condition. If it does, it returns `Some(5)`, which replaces the value of `foo`. If it doesn't, it returns `None`, which leaves `foo` unchanged.