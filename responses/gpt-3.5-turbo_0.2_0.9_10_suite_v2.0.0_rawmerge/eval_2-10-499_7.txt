You can set the `conn` field to an empty `TcpStream` value using the `Default` trait. Here's how you can implement it:

```rust
pub struct FistClient {
    addr: String,
    conn: TcpStream,
}

impl FistClient {
    pub fn new(ip: &str, port: &str) -> Self {
        FistClient {
            addr: String::from(ip) + ":" + &String::from(port),
            conn: TcpStream::default(),
        }
    }

    pub fn connect(&mut self, ip: &str, port: &str) {
        let res = TcpStream::connect(&self.addr);
        match res {
            Ok(c) => self.conn = c,
            Err(_) => panic!(),
        }
    }
}

impl Default for FistClient {
    fn default() -> Self {
        FistClient {
            addr: String::new(),
            conn: TcpStream::default(),
        }
    }
}
```

In this implementation, the `new` method sets the `conn` field to the default value of `TcpStream`, which is an empty stream. The `Default` trait is implemented for the `FistClient` struct, which sets the `addr` field to an empty string and the `conn` field to the default value of `TcpStream`.