You can use the `sort_by` method provided by Rust's standard library to sort a `Vec` of structs by multiple fields. Here's an example of how you can sort your `my_vector` by `row` and then by `column`:

```rust
my_vector.sort_by(|a, b| {
    if a.row == b.row {
        a.column.cmp(&b.column)
    } else {
        a.row.cmp(&b.row)
    }
});
```

This code uses a closure to define the sorting criteria. The closure takes two arguments `a` and `b`, which are two elements of the `Vec` being sorted. The `sort_by` method will call this closure repeatedly to compare pairs of elements and determine their relative order.

The closure first checks if the `row` field of `a` is equal to the `row` field of `b`. If they are equal, it compares the `column` field of `a` and `b` using the `cmp` method. If they are not equal, it compares the `row` field of `a` and `b` using the `cmp` method.

This will sort the `my_vector` by `row` first, and then by `column` within each `row`.