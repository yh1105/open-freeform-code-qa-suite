Here's a possible implementation of the `removeComma` function:

```r
removeComma <- function(s) {
  # Find all quoted substrings
  quoted <- gregexpr("\"[^\"]*\"", s)
  # Replace commas inside quoted substrings with a placeholder
  s[quoted] <- gsub(",", "###COMMA###", s[quoted])
  # Split the string by commas
  s <- strsplit(s, ", ")
  # Replace the placeholders with commas inside quoted substrings
  for (i in seq_along(s)) {
    for (j in seq_along(s[[i]])) {
      if (grepl("\"", s[[i]][j])) {
        s[[i]][j] <- gsub("###COMMA###", ",", s[[i]][j])
      }
    }
  }
  # Join the strings back together
  s <- sapply(s, paste, collapse = ", ")
  return(s)
}
```

Here's how you can use it:

```r
string <- c("1, 2, \"something, else\"", "3, 5, \"more, more, more\"", "6, \"commas, are fun\", \"no, they are not\"")
removeComma(string)
# [1] "1, 2, \"something else\""                  
# [2] "3, 5, \"more more more\""                  
# [3] "6, \"commas are fun\", \"no they are not\""
```

The function first finds all quoted substrings using `gregexpr()`. It then replaces all commas inside these substrings with a placeholder string (`###COMMA###`) using `gsub()`. This is done to avoid splitting the string by commas inside quoted substrings. The function then splits the string by commas using `strsplit()`, and replaces the placeholders with commas inside quoted substrings using another loop and `gsub()`. Finally, the function joins the strings back together using `sapply()` and `paste()`.