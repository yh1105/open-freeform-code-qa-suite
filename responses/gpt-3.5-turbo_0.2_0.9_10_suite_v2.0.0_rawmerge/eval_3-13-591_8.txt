The reason why you are seeing the logs in that order is because the `onItemSelected` function is called asynchronously when the user selects an item from the spinner. This means that the `return` statement is executed before the `onItemSelected` function is called, hence the empty string being returned.

To fix this, you can use a callback function to pass the selected item back to the calling function. Here's an example:

```
fun Spinner.setupListWithAdapter(list: MutableList<String>, callback: (String) -> Unit) {
    val adapter = ArrayAdapter(context, android.R.layout.simple_spinner_item, list)
    adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
    this.adapter = adapter
    this.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {
        override fun onItemSelected(p0: AdapterView<*>?, p1: View?, p2: Int, p3: Long) {
            val itemSelected = list[p2]
            Log.e("categoryLog","1 : " + itemSelected)
            callback(itemSelected)
        }
        override fun onNothingSelected(p0: AdapterView<*>?) {
        }
    }
}
```

In this modified function, we have replaced the `String` return type with a callback function that takes a `String` parameter. Inside the `onItemSelected` function, we call the callback function with the selected item as the parameter. This way, the selected item is passed back to the calling function as soon as it is selected by the user.

To use this function, you can call it like this:

```
spinner.setupListWithAdapter(list) { selectedItem ->
    // Do something with the selected item
    Log.e("categoryLog","2 : " + selectedItem)
}
```

Here, we pass a lambda function as the second parameter to the `setupListWithAdapter` function. This lambda function takes a `String` parameter, which is the selected item from the spinner. Inside the lambda function, you can do whatever you want with the selected item. In this example, we are simply logging it to the console.