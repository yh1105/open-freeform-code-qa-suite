To connect to Heroku Redis using TLS on Node, you should use the `REDIS_TLS_URL` environment variable instead of `REDIS_URL`. Here's an example of how to connect to Heroku Redis using node_redis v3:

```javascript
const redis = require('redis');
const url = require('url');

const redisUrl = url.parse(process.env.REDIS_TLS_URL);
const client = redis.createClient(redisUrl.port, redisUrl.hostname, {
  tls: {
    rejectUnauthorized: false
  }
});

client.auth(redisUrl.auth.split(":")[1]);
```

In this example, we're using the `url` module to parse the `REDIS_TLS_URL` environment variable and create a `redis` client with the `tls` option set to `{ rejectUnauthorized: false }`. This is necessary because Heroku Redis uses a self-signed certificate, which would otherwise cause the connection to fail.

Note that you'll need to replace `process.env.REDIS_TLS_URL` with the actual environment variable name you're using in your code.