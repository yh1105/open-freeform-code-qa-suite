Yes, you can achieve this by using refs in React. Here's how you can modify your code to accomplish this:

```javascript
import React, { Component } from "react";
import ReactDOM from "react-dom";

class CustomForm extends Component {
  handleSubmit = (event) => {
    event.preventDefault();
    alert('Form submitted!');
  }

  render() {
    return (
      <form id='my-form' onSubmit={this.handleSubmit}>
        <button type='submit'>Inside Custom</button>
      </form>
    );
  }
}

class App extends Component {
  customFormRef = React.createRef();

  handleSubmit = (event) => {
    event.preventDefault();
    this.customFormRef.current.handleSubmit(event);
  }

  render() {
    return (
      <div>
        <CustomForm ref={this.customFormRef} />
        <button onClick={this.handleSubmit}>In Root</button>
      </div>
    );
  }
}

const rootElement = document.getElementById("root");
ReactDOM.render(<App />, rootElement);
```

In this modified code, we have created a ref using `React.createRef()` in the `App` component and passed it to the `CustomForm` component using the `ref` prop. We have also defined a `handleSubmit` method in the `App` component that calls the `handleSubmit` method of the `CustomForm` component using the ref.

Now, when the 'In Root' button is clicked, the `handleSubmit` method of the `App` component is called, which in turn calls the `handleSubmit` method of the `CustomForm` component, submitting the form.