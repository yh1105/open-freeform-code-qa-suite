To use the `promhttp` library with the `gin` framework, you can create a new `gin` router and add a route for the `/metrics` endpoint. Here's an example:

```go
package main

import (
    "log"

    "github.com/gin-gonic/gin"
    "github.com/prometheus/client_golang/prometheus"
    "github.com/prometheus/client_golang/prometheus/promhttp"
)

var cpuTemp = prometheus.NewGauge(prometheus.GaugeOpts{
    Name: "cpu_temperature_celsius",
    Help: "Current temperature of the CPU.",
})

func init() {
    // Metrics have to be registered to be exposed:
    prometheus.MustRegister(cpuTemp)
}

func main() {
    cpuTemp.Set(65.3)

    // Create a new gin router
    r := gin.Default()

    // Add a route for the /metrics endpoint
    r.GET("/metrics", gin.WrapH(promhttp.Handler()))

    // Start the server
    if err := r.Run(":8080"); err != nil {
        log.Fatal(err)
    }
}
```

In this example, we create a new `gin` router using `gin.Default()`. We then add a route for the `/metrics` endpoint using `r.GET("/metrics", gin.WrapH(promhttp.Handler()))`. The `gin.WrapH` function is used to wrap the `promhttp.Handler()` so that it can be used as a `gin` handler.

Finally, we start the server using `r.Run(":8080")`.