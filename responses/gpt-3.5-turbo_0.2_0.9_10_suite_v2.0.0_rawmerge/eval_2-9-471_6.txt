To import images in a React component with TypeScript and Parcel, you need to do the following:

1. Create a `.d.ts` file with the same name as the image file, e.g., `image.jpg.d.ts`.
2. Inside the `.d.ts` file, declare a module with the same name as the image file, e.g., `declare module '*.jpg';`.
3. In your component file, import the image using the `require` function, e.g., `const img = require('../assets/image.jpg');`.

Here's an example of how your files should look like:

```
+ src
  + assets
    - image.jpg
  + components
    - Box.tsx
    - App.tsx
  - index.html
  - index.tsx
- tsconfig.json
- tslint.json
```

`image.jpg.d.ts`:

```typescript
declare module '*.jpg';
```

`App.tsx`:

```typescript
import * as React from 'react';

const img = require('../assets/image.jpg');

const Box = props => {
  // do things...
}

export default Box;
```

Note that you don't need to include the `.d.ts` file in `tsconfig.json`. TypeScript will automatically pick it up as long as it's in the same directory as the image file. Also, make sure that the image file is being copied to the output directory by Parcel. You can do this by adding the following to your `package.json`:

```json
{
  "parcel": {
    "sourceMaps": true,
    "scripts": {
      "build": "parcel build src/index.html --public-url ./"
    },
    "defaultConfig": {
      "postcss": {
        "plugins": [
          [
            "postcss-preset-env",
            {
              "stage": 0
            }
          ]
        ]
      }
    }
  },
  "scripts": {
    "start": "parcel src/index.html",
    "build": "parcel build src/index.html --public-url ./"
  }
}
```

This will copy all files in the `assets` directory to the output directory.