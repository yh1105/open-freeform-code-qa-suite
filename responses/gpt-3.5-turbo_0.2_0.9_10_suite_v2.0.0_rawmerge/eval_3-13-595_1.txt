Starting from Android 11, there are some changes in the way file storage works. One of the major changes is that apps can no longer access files in the external storage directory directly. Instead, you need to use the MediaStore API to access files in the external storage directory.

To fix the issue, you can try the following:

1. Add the following permission to your AndroidManifest.xml file:

```
<uses-permission android:name="android.permission.MANAGE_EXTERNAL_STORAGE" />
```

2. Use the MediaStore API to create the file. Here's an example:

```
private fun saveImageToFile(bitmap: Bitmap? = null): String? {
    return try {
        val timeStamp = SimpleDateFormat("yyyyMMdd_HHMMss", Locale.getDefault()).format(Date())
        val fileName = "image".plus(Calendar.getInstance().timeInMillis).plus(timeStamp).plus(".jpg")
        val resolver = context.contentResolver
        val contentValues = ContentValues().apply {
            put(MediaStore.MediaColumns.DISPLAY_NAME, fileName)
            put(MediaStore.MediaColumns.MIME_TYPE, "image/jpeg")
            put(MediaStore.MediaColumns.RELATIVE_PATH, Environment.DIRECTORY_PICTURES + "/sample-take-image")
        }
        val imageUri = resolver.insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, contentValues)
        val outputStream = resolver.openOutputStream(imageUri!!)
        bitmap?.apply {
            this.compress(Bitmap.CompressFormat.JPEG, 100, outputStream)
        }
        outputStream?.flush()
        outputStream?.close()
        imageUri.toString()
    } catch (e: Exception) {
        e.printStackTrace()
        ""
    }
}
```

This code creates a new file in the Pictures/sample-take-image directory using the MediaStore API. It then saves the bitmap to the file using an output stream.

Note that you need to replace `context` with the context of your activity or fragment.