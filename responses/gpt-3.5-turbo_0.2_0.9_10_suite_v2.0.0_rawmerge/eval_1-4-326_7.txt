Here's a possible implementation of the `removeComma` function:

```r
removeComma <- function(s) {
  # Find all quoted substrings
  quoted <- regmatches(s, gregexpr("\"[^\"]*\"", s))[[1]]
  
  # Replace commas inside quoted substrings with a special character
  for (q in quoted) {
    s <- gsub(",", "ยง", q)
  }
  
  # Separate rows using commas as separators
  s <- tidyr::separate_rows(s, sep = ",")
  
  # Replace special character with commas inside quoted substrings
  for (q in quoted) {
    s <- gsub("ยง", ",", s)
  }
  
  # Return the modified string
  return(s)
}
```

Here's how you can use it:

```r
string <- c("1, 2, \"something, else\"", "3, 5, \"more, more, more\"", "6, \"commas, are fun\", \"no, they are not\"")
removeComma(string)
#[1] "1, 2, \"something else\""                  
#[2] "3, 5, \"more more more\""                  
#[3] "6, \"commas are fun\", \"no they are not\""
```

The function first finds all quoted substrings using a regular expression. Then, it replaces commas inside quoted substrings with a special character (ยง), so that they won't interfere with the separation process. After separating the rows using commas as separators, the function replaces the special character with commas inside quoted substrings. Finally, it returns the modified string.