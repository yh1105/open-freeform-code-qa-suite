You can use the `tstrsplit` function from the `data.table` package to split the `segment_stemming` column into two separate columns. Then, you can use the `separate_rows` function from the `tidyr` package to split the tuples into separate rows.

Here's the `mySplit` function that implements this approach:

```r
library(data.table)
library(tidyr)

mySplit <- function(x) {
  # Split the segment_stemming column into two columns
  x[, c("word", "pos") := tstrsplit(segment_stemming, ",\\s*|\\[\\(|\\)\\]", perl = TRUE)][]
  
  # Remove quotes and parentheses from the word and pos columns
  x[, c("word", "pos") := lapply(.SD, function(x) gsub("[\"'()]", "", x)), .SDcols = c("word", "pos")]
  
  # Split the tuples into separate rows
  x <- separate_rows(x, word, pos, sep = "\\s+")
  
  # Remove any empty rows
  x <- x[word != ""]
  
  # Return the result
  return(x[, .(id, segment_stemming = paste0("('", word, "', '", pos, "')"))])
}
```

You can test the function with the sample data you provided:

```r
x <- structure(list(id = c("A", "B" ),
segment_stemming = c("[('Brownie', 'Noun'), ('From', 'Josa'), ('Pi', 'Noun')]",
"[('Dung-caroon-gye', 'Noun'), ('in', 'Josa'), ('innovation', 'Noun')]" )),
row.names = c(NA, -2L),
class = c("data.table", "data.frame" ))

mySplit(x)
#    id             segment_stemming
# 1:  A              ('Brownie', 'Noun')
# 2:  A                 ('From', 'Josa')
# 3:  A                  ('Pi', 'Noun')
# 4:  B     ('Dung-caroon-gye', 'Noun')
# 5:  B                   ('in', 'Josa')
# 6:  B           ('innovation', 'Noun')
```