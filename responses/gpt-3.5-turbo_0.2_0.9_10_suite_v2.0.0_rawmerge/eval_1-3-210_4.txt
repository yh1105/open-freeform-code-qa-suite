The reason why the access times are different is because the `match` statement in Python is not implemented as a lookup table. Instead, it is implemented as a series of `if`/`elif` statements under the hood. This means that the time it takes to match a case depends on the position of that case in the `match` statement.

In your example, the first case (`case '0'`) is the fastest because it is the first one to be evaluated. The second case (`case '1'`) is slightly faster than the third case (`case '2'`) because it is evaluated before it. This pattern continues for the rest of the cases.

If you want to have equal access times for each case, you can use a dictionary to map the cases to their corresponding values. This will give you O(1) lookup time for each case, regardless of its position in the dictionary. Here's an example:

```python
def match_case(decimal):
    cases = {
        '0': "000",
        '1': "001",
        '2': "010",
        '3': "011",
        '4': "100",
        '5': "101",
        '6': "110",
        '7': "111"
    }
    return cases.get(decimal, "NA")
```

With this implementation, the lookup time for each case will be constant, regardless of its position in the dictionary.