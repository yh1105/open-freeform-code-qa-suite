Here's the revised code for the `pig_latin` function:

```python
def pig_latin(text):
  words = text.split()
  pig_latin_words = []
  for word in words:
    endString = word[1:].lower() + word[0].lower() + 'ay'
    pig_latin_words.append(endString)
  return ' '.join(pig_latin_words)
```

The changes made are:

1. Instead of initializing `say` to an empty string, we initialize an empty list `pig_latin_words` to store the pig Latin words.
2. We iterate through each word in `words`.
3. We create the pig Latin version of the word by moving the first character to the end, adding 'ay' to the end, and converting the whole word to lowercase.
4. We append the pig Latin version of the word to `pig_latin_words`.
5. After iterating through all the words, we join the pig Latin words with a space and return the resulting string.

This should give the correct output for the given test cases.