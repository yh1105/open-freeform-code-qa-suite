In Rust, a `Box` cannot be null. Instead, you can use an `Option<Box<Node>>` to represent a nullable pointer. Here's an example implementation of a stack using `Option<Box<Node>>`:

```rust
struct Node {
    value: i32,
    next: Option<Box<Node>>,
}

struct Stack {
    top: Option<Box<Node>>,
}

impl Stack {
    fn push(&mut self, value: i32) {
        let new_node = Box::new(Node {
            value: value,
            next: self.top.take(),
        });
        self.top = Some(new_node);
    }

    fn pop(&mut self) -> Option<i32> {
        self.top.take().map(|node| {
            self.top = node.next;
            node.value
        })
    }
}
```

In this implementation, `self.top` is an `Option<Box<Node>>` that is initially set to `None`. When a new value is pushed onto the stack, a new `Box<Node>` is created and its `next` field is set to the current top of the stack (which may be `None` if the stack is empty). The new node is then set as the new top of the stack.

When a value is popped from the stack, we use the `take` method to remove the current top of the stack and replace it with `None`. We then use the `map` method to extract the value from the removed node (if there was one) and update the top of the stack to be the next node (if there is one).