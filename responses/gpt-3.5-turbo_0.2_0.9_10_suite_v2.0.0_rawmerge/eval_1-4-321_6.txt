You can use the `tstrsplit` function from the `data.table` package to split the `segment_stemming` column into two separate columns. Then, you can use the `separate_rows` function from the `tidyr` package to split the tuples into separate rows.

Here's the `mySplit` function that implements this approach:

```r
library(data.table)
library(tidyr)

mySplit <- function(x) {
  # split the segment_stemming column into two columns
  x[, c("word", "pos") := tstrsplit(segment_stemming, ",\\s*|\\[\\(|\\)\\]")][, segment_stemming := NULL]
  
  # split the tuples into separate rows
  separate_rows(x, word, pos, sep = "'") %>%
    filter(word != "") %>%
    mutate(word = paste0("'", word, "'")) %>%
    select(id, segment_stemming = word)
}
```

You can use this function as follows:

```r
x <- structure(list(id = c("A", "B" ),
segment_stemming = c("[('Brownie', 'Noun'), ('From', 'Josa'), ('Pi', 'Noun')]",
"[('Dung-caroon-gye', 'Noun'), ('in', 'Josa'), ('innovation', 'Noun')]" )),
row.names = c(NA, -2L),
class = c("data.table", "data.frame" ))

mySplit(x)
```

This will give you the expected output:

```
  id             segment_stemming
1  A              ('Brownie', 'Noun')
2  A                 ('From', 'Josa')
3  A                   ('Pi', 'Noun')
4  B     ('Dung-caroon-gye', 'Noun')
5  B                    ('in', 'Josa')
6  B             ('innovation', 'Noun')
```