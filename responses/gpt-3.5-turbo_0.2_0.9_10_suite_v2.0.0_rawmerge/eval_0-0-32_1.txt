To identify if a div is visible on the viewport, you can use the Intersection Observer API. Here's an example of how you can use it:

```javascript
const observer = new IntersectionObserver(entries => {
  entries.forEach(entry => {
    if (entry.isIntersecting) {
      console.log(`${entry.target.id} is visible on the viewport`);
    }
  });
});

data.forEach(item => {
  const div = document.createElement('div');
  div.id = item.id;
  div.textContent = item.title;
  document.querySelector('#parent').appendChild(div);
  observer.observe(div);
});
```

This code creates an `IntersectionObserver` instance and observes each div inside `#parent`. When a div becomes visible on the viewport, the `isIntersecting` property of the `entry` object is `true`, and you can log a message to the console.

You can also use the `react-intersection-observer` package from npm to use the Intersection Observer API in a React component. Here's an example of how you can use it:

```javascript
import React, { useRef } from 'react';
import { useInView } from 'react-intersection-observer';

const MyComponent = ({ data }) => {
  const parentRef = useRef(null);
  const [visibleIds, setVisibleIds] = useState([]);

  const handleIntersection = (entries) => {
    const newVisibleIds = entries
      .filter(entry => entry.isIntersecting)
      .map(entry => entry.target.id);
    setVisibleIds(newVisibleIds);
  };

  const { ref: parentObserverRef } = useInView({
    threshold: 0,
    rootMargin: '0px',
    triggerOnce: false,
    onEnter: handleIntersection,
    onLeave: handleIntersection,
  });

  return (
    <div id="parent" ref={parentObserverRef}>
      {data.map(item => (
        <div key={item.id} id={item.id}>
          {item.title}
        </div>
      ))}
    </div>
  );
};
```

This code uses the `useInView` hook from `react-intersection-observer` to observe the `#parent` div. When a child div becomes visible on the viewport, the `handleIntersection` function is called, and the `visibleIds` state is updated with the ids of the visible divs. You can then use this state to render the visible divs differently, for example