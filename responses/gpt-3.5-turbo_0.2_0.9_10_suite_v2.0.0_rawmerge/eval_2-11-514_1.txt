Here's an implementation of the `fun` function in C++14 that satisfies the given constraints:

```c++
#include <array>

template <uint32_t argsCount, typename T, std::size_t... Is>
void fun_impl(std::array<T, argsCount> arr, std::index_sequence<Is...>)
{
    // Do something with the array of arguments
    // For example, print them out
    for (const auto& arg : arr)
    {
        std::cout << arg.a << " " << arg.b << " " << arg.c << std::endl;
    }
}

template <uint32_t argsCount, typename T>
void fun(T... args)
{
    static_assert(sizeof...(args) == argsCount * 3, "Incorrect number of arguments");

    std::array<T, argsCount> arr{ args... };

    fun_impl(arr, std::make_index_sequence<argsCount>{});
}
```

The `fun` function takes a template parameter `argsCount` which specifies the number of arguments expected, and a template parameter `T` which specifies the type of each argument. The function also takes a variable number of arguments of type `T`.

Inside the function, we create an `std::array` of size `argsCount` to hold the arguments. We use the `args...` parameter pack to initialize the array with the given arguments.

We then call a helper function `fun_impl` with the array and an `std::index_sequence` of size `argsCount`. The `std::index_sequence` is used to generate a sequence of indices from 0 to `argsCount - 1`, which we can use to access the elements of the array.

The `fun_impl` function takes the array and the index sequence as arguments. We use a fold expression to iterate over the indices and access each element of the array. We can then do something with the array of arguments, such as print them out.

Note that we use `std::make_index_sequence` to generate the index sequence, which requires C++14 or newer. If you're using an older version of C++, you can use a custom implementation of `make_index_sequence` or hard-code the index sequence.