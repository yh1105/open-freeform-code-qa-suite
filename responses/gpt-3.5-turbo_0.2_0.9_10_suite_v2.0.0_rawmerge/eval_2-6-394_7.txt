You can use an open generic type to register a generic interface with a dependency injection container. Here's an example of how to register your `IDatabaseService<T>` interface with the `IServiceCollection` in your `Startup.cs` file:

```c#
services.AddScoped(typeof(IDatabaseService<>), typeof(DatabaseService<>));
```

This registers the open generic type `IDatabaseService<>` with the closed generic type `DatabaseService<>`. The `<>` syntax indicates that the type is open and can be closed with a specific type argument at runtime.

Now you can inject `IDatabaseService<T>` into your controllers like this:

```c#
public class MyController : Controller
{
    private readonly IDatabaseService<MyModel> _databaseService;

    public MyController(IDatabaseService<MyModel> databaseService)
    {
        _databaseService = databaseService;
    }

    // ...
}
```

In this example, `MyModel` is the type argument that is used to close the generic `IDatabaseService<T>` interface.