You can set the `conn` field to an empty `TcpStream` instance using the `Default` trait. Here's how you can do it:
```rust
use std::net::TcpStream;

pub struct FistClient {
    addr: String,
    conn: TcpStream,
}

impl FistClient {
    pub fn new(ip: &str, port: &str) -> Self {
        FistClient {
            addr: String::from(ip) + ":" + &String::from(port),
            conn: TcpStream::default(),
        }
    }

    pub fn connect(&mut self, ip: &str, port: &str) {
        let res = TcpStream::connect(&self.addr);
        match res {
            Ok(c) => self.conn = c,
            Err(_) => panic!(),
        }
    }
}
```
In this code, we have added `use std::net::TcpStream;` to import the `TcpStream` module. Then we have implemented the `Default` trait for `TcpStream` by adding `#[derive(Default)]` above the `struct` definition. This allows us to create an empty `TcpStream` instance using the `default()` method. Finally, we have set the `conn` field to the default value in the `new` method.