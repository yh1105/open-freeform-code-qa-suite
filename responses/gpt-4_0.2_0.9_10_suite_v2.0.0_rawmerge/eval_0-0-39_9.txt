Yes, you can achieve this by using `React.createRef()`. You can create a reference to the form in the `CustomForm` component and then pass this reference to the `App` component. In the `App` component, you can use this reference to submit the form when the 'In Root' button is clicked.

Here is how you can do it:

```javascript
import React, { Component } from "react";
import ReactDOM from "react-dom";

class CustomForm extends Component {
  formRef = React.createRef();

  componentDidMount() {
    this.props.passRefUpward(this.formRef);
  }

  render() {
    return (
      <form id='my-form' ref={this.formRef} onSubmit={e => {e.preventDefault(); alert('Form submitted!')}}>
        <button type='submit'>Inside Custom</button>
      </form>
    );
  }
}

class App extends Component {
  formRef = null;

  handleRef = (ref) => {
    this.formRef = ref;
  }

  handleSubmit = () => {
    if (this.formRef.current) {
      this.formRef.current.dispatchEvent(new Event('submit', { cancelable: true }));
    }
  }

  render() {
    return (
      <div>
        <CustomForm passRefUpward={this.handleRef} />
        <button onClick={this.handleSubmit}>In Root</button>
      </div>
    );
  }
}

const rootElement = document.getElementById("root");
ReactDOM.render(<App />, rootElement);
```

In this code:

- `React.createRef()` is used to create a reference to the form in the `CustomForm` component.
- `componentDidMount()` lifecycle method is used to pass the form reference to the `App` component after the `CustomForm` component has been mounted.
- `handleRef()` method in the `App` component is used to receive the form reference from the `CustomForm` component.
- `handleSubmit()` method in the `App` component is used to submit the form when the 'In Root' button is clicked. It dispatches a 'submit' event on the form using the form reference.
- `onClick` event handler is added to the 'In Root' button to call the `handleSubmit()` method when the button is clicked.