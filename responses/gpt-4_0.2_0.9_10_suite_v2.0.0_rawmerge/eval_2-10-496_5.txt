You can use the `sort_by` method provided by Rust's standard library. This method sorts the vector in-place using a comparator function. 

Here is how you can do it:

```rust
my_vector.sort_by(|a, b| {
    a.row.cmp(&b.row)
        .then_with(|| a.column.cmp(&b.column))
});
```

In this code, `a.row.cmp(&b.row)` compares the `row` fields of two `MyStruct` instances. If they are equal, it will then compare the `column` fields using `a.column.cmp(&b.column)`. This is done using the `then_with` method, which returns the result of the second comparison if the first comparison returns `Equal`.

Here is the full code:

```rust
struct MyStruct{
    row: u8,
    column: u8
}

fn main() {
    let mut my_vector = vec![
        MyStruct { row: 10, column: 3 },
        MyStruct { row: 10, column: 2 },
        MyStruct { row: 10, column: 1 },
        // ... add more items here
    ];

    my_vector.sort_by(|a, b| {
        a.row.cmp(&b.row)
            .then_with(|| a.column.cmp(&b.column))
    });

    // Now my_vector is sorted by row and then by column
}
```

This will sort `my_vector` first by `row` and then by `column` in ascending order. If you want to sort in descending order, you can use `cmp` method in reverse:

```rust
my_vector.sort_by(|a, b| {
    b.row.cmp(&a.row)
        .then_with(|| b.column.cmp(&a.column))
});
```

This will sort `my_vector` first by `row` and then by `column` in descending order.