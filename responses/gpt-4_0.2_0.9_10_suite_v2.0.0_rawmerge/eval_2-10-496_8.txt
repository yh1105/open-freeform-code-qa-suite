You can use the `sort_by` method provided by Rust's `Vec` type to sort your vector of structs. This method takes a closure which receives two elements of the vector and must return an ordering.

Here's how you can sort your vector by `row` and then by `column`:

```rust
my_vector.sort_by(|a, b| {
    match a.row.cmp(&b.row) {
        std::cmp::Ordering::Equal => a.column.cmp(&b.column),
        ordering => ordering,
    }
});
```

In this code, we first compare the `row` fields of the two structs. If they are equal, we then compare the `column` fields. If the `row` fields are not equal, we use their ordering as the result.

This will sort your vector in ascending order by `row` and then by `column`. If you want to sort in descending order, you can use the `reverse` method after sorting:

```rust
my_vector.sort_by(|a, b| {
    match a.row.cmp(&b.row) {
        std::cmp::Ordering::Equal => a.column.cmp(&b.column),
        ordering => ordering,
    }
});
my_vector.reverse();
```

This will give you a vector sorted in descending order by `row` and then by `column`.