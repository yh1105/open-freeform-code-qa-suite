Yes, there are more idiomatic ways to express the same logic in Rust. Here are a few alternatives:

1. Using `if let` combined with a condition:

```rust
fn main() {
    let mut foo: Option<u8> = None;
    if let Some(foo_val) = foo {
        if foo_val < 5 {
            foo.replace(5);
        }
    } else {
        foo.replace(5);
    }
}
```

2. Using `map_or`:

```rust
fn main() {
    let mut foo: Option<u8> = None;
    foo = foo.map_or(Some(5), |foo_val| if foo_val < 5 { Some(5) } else { Some(foo_val) });
}
```

3. Using `unwrap_or_else`:

```rust
fn main() {
    let mut foo: Option<u8> = None;
    foo = Some(foo.unwrap_or_else(|| 5));
}
```

4. Using `match` with a more idiomatic way:

```rust
fn main() {
    let mut foo: Option<u8> = None;
    match foo {
        Some(foo_val) if foo_val >= 5 => {}
        _ => { foo = Some(5); }
    }
}
```

5. Using `or_else`:

```rust
fn main() {
    let mut foo: Option<u8> = None;
    foo = foo.or_else(|| Some(5));
}
```

Please note that the behavior of these alternatives might slightly differ depending on the specific requirements of your code.