The Gin framework allows you to use middleware to handle HTTP requests. You can use the `promhttp.Handler()` function to create a handler for your metrics endpoint, and then use the `gin.WrapH()` function to wrap this handler into a Gin middleware.

Here's how you can modify your code to use the Gin framework:

```go
package main

import (
    "github.com/gin-gonic/gin"
    "github.com/prometheus/client_golang/prometheus"
    "github.com/prometheus/client_golang/prometheus/promhttp"
)

var cpuTemp = prometheus.NewGauge(prometheus.GaugeOpts{
    Name: "cpu_temperature_celsius",
    Help: "Current temperature of the CPU.",
})

func init() {
    // Metrics have to be registered to be exposed:
    prometheus.MustRegister(cpuTemp)
}

func main() {
    cpuTemp.Set(65.3)

    // Create a new router
    r := gin.Default()

    // The promhttp.Handler function provides a default handler to expose metrics
    // via an HTTP server. "/metrics" is the usual endpoint for that.
    // We use gin.WrapH to convert it into a gin.HandlerFunc
    r.GET("/metrics", gin.WrapH(promhttp.Handler()))

    // Start the server
    r.Run(":8080")
}
```

In this code, `gin.Default()` creates a new Gin router with some default middleware, and `r.GET("/metrics", gin.WrapH(promhttp.Handler()))` adds a new route to this router that handles GET requests to "/metrics" by exposing your Prometheus metrics. Finally, `r.Run(":8080")` starts the HTTP server on port 8080.