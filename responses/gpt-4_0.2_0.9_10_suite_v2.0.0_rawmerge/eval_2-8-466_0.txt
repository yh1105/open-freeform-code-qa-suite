To use the Prometheus Go client with the Gin framework, you need to use a middleware that can expose the metrics endpoint. Here's an example of how you can do this:

```go
package main

import (
    "github.com/gin-gonic/gin"
    "github.com/prometheus/client_golang/prometheus"
    "github.com/prometheus/client_golang/prometheus/promhttp"
)

var cpuTemp = prometheus.NewGauge(prometheus.GaugeOpts{
    Name: "cpu_temperature_celsius",
    Help: "Current temperature of the CPU.",
})

func init() {
    // Metrics have to be registered to be exposed:
    prometheus.MustRegister(cpuTemp)
}

func main() {
    cpuTemp.Set(65.3)

    r := gin.Default()

    // Use the promhttp Handler as a middleware
    r.GET("/metrics", gin.WrapH(promhttp.Handler()))

    r.Run(":8080") // listen and serve on 0.0.0.0:8080
}
```

In this example, the `gin.WrapH(promhttp.Handler())` line wraps the Prometheus HTTP handler into a Gin handler. This allows the `/metrics` endpoint to be served by the Gin server, exposing the Prometheus metrics.