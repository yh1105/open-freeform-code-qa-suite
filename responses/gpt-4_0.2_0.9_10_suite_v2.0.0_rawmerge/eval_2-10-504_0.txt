Your second way of removing duplicates using a `HashSet` is already quite efficient and simple. It leverages the fact that a `HashSet` only allows unique elements, so it automatically removes duplicates for you.

However, if you want to make it even simpler, you can use the `dedup` method provided by Rust. This method removes consecutive duplicates. But, it requires the slice to be sorted first. Here's how you can do it:

```rust
fn main() {
    let mut arr = [
        Person { name: "aaa".to_string(), age: 10 },
        Person { name: "bbb".to_string(), age: 20 },
        Person { name: "bbb".to_string(), age: 20 },
        Person { name: "ccc".to_string(), age: 30 },
    ];

    arr.sort_by(|a, b| a.name.cmp(&b.name));
    arr.dedup_by(|a, b| a.name == b.name);

    dbg!(arr);
}
```

Please note that this method will only remove duplicates that are next to each other, so you need to sort the array first. Also, this method only works if the array is mutable.

If you want to keep the original order of elements and don't want to mutate the original array, your second way with `HashSet` is already a good solution.