You can use the `sort_by` method provided by Rust's standard library. This method sorts the vector in-place using a comparator function. In your case, you can compare first by `row`, and then by `column` if the rows are equal.

Here is an example:

```rust
struct MyStruct {
    row: u8,
    column: u8,
}

let mut my_vector = vec![
    MyStruct { row: 10, column: 3 },
    MyStruct { row: 10, column: 2 },
    MyStruct { row: 10, column: 1 },
    // ... more items ...
];

my_vector.sort_by(|a, b| {
    a.row.cmp(&b.row)
        .then_with(|| a.column.cmp(&b.column))
});
```

In this code, `sort_by` takes a closure that compares two elements of the vector. The `cmp` method returns an `Ordering` that can be one of `Less`, `Equal`, or `Greater`. If the rows are equal (`Equal`), it goes on to compare the columns.

After the `sort_by` call, `my_vector` will be sorted first by `row`, and then by `column` within each group of equal `row` values.