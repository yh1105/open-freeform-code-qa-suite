In Rust, you can't create an instance of `TcpStream` without connecting to a server. This is because `TcpStream` represents an active TCP connection, and there's no such thing as an "empty" or "default" TCP connection.

However, you can use `Option<TcpStream>` for the `conn` field. This allows you to have a `None` value when the connection is not established yet.

Here's how you can modify your code:

```rust
use std::net::TcpStream;

pub struct FistClient {
    addr: String,
    conn: Option<TcpStream>,
}

impl FistClient {
    pub fn new(ip: &str, port: &str) -> Self {
        FistClient {
            addr: String::from(ip) + ":" + &String::from(port),
            conn: None, // default value
        }
    }

    pub fn connect(&mut self) {
        let res = TcpStream::connect(&self.addr);
        match res {
            Ok(c) => self.conn = Some(c),
            Err(_) => panic!(),
        }
    }
}
```

In this code, `conn` is an `Option<TcpStream>`, which means it can be either `Some(TcpStream)` or `None`. When you create a new `FistClient`, `conn` is set to `None`. When you call `connect`, it tries to establish a connection and if successful, sets `conn` to `Some(TcpStream)`.