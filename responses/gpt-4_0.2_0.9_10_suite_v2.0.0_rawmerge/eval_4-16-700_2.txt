You can optimize your task by using `awk` command. Here is an optimized version of your script:

```bash
awk -F'=' '/^name/{n=$2;next} /^value/{print n"="$2}' input.txt > output.txt
```

This `awk` command works as follows:

- `-F'='` sets the field separator to `=`.
- `/^name/{n=$2;next}` if the line starts with `name`, it saves the second field (after `=`) to the variable `n` and skips to the next line.
- `/^value/{print n"="$2}` if the line starts with `value`, it prints the previously saved name and the current value.

This script should be significantly faster than your original script because it processes the file line by line without loading the entire file into memory and without using additional commands like `grep` and `sed`.