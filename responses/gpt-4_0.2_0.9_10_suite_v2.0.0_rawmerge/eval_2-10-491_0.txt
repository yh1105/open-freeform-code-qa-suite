Sure, here are a few more idiomatic ways to express the same logic in Rust:

1. Using `if let` with a condition:

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        if let Some(foo_val) = foo {
            if foo_val < 5 {
                foo.replace(5);
            }
        } else {
            foo.replace(5);
        }
    }
    ```

2. Using `match` with a tuple:

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        match (foo, foo.filter(|&x| x >= 5)) {
            (None, _) | (_, None) => { foo.replace(5); }
            _ => {}
        }
    }
    ```

3. Using `if let` with `else`:

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        if let Some(foo_val) = foo {
            if foo_val >= 5 {
                // do nothing
            } else {
                foo.replace(5);
            }
        } else {
            foo.replace(5);
        }
    }
    ```

4. Using `map_or`:

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        foo = foo.map_or(Some(5), |foo_val| if foo_val < 5 { Some(5) } else { Some(foo_val) });
    }
    ```

5. Using `unwrap_or_else`:

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        foo = Some(foo.unwrap_or_else(|| 5));
    }
    ```

6. Using `or_else`:

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        foo = foo.or_else(|| Some(5));
    }
    ```

7. Using `get_or_insert`:

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        foo.get_or_insert(5);
    }
    ```

Each of these examples is equivalent to your original code, but they each use different features of Rust's `Option` type to achieve the same result.