Sure, you can achieve this by using the `groupby`, `cumsum` and `fillna` methods provided by pandas. Here is a function that does this:

```python
def aggregation(df):
    # Convert the 'value' column to numeric
    df['value'] = pd.to_numeric(df['value'])

    # Create a new column 'balance' which is the cumulative sum of 'value' where 'type' is 'deposit'
    df['balance'] = df[df['type'] == 'deposit'].groupby('exchange')['value'].cumsum()

    # Forward fill the 'balance' column
    df['balance'] = df.groupby('exchange')['balance'].fillna(method='ffill')

    # Fill remaining NaN values with 0
    df['balance'] = df['balance'].fillna(0)

    return df
```

This function first converts the 'value' column to numeric type. Then it creates a new column 'balance' which is the cumulative sum of 'value' where 'type' is 'deposit', grouped by 'exchange'. It then forward fills the 'balance' column within each 'exchange' group. Finally, it fills any remaining NaN values in the 'balance' column with 0.

You can use this function like this:

```python
df = aggregation(df)
print(df)
```

This will print:

```python
   exchange     type  value  balance
0         1  deposit     10     10.0
1         1  deposit     10     20.0
2         1    trade     30     20.0
3         2  deposit     40     40.0
4         3  deposit    100    100.0
```