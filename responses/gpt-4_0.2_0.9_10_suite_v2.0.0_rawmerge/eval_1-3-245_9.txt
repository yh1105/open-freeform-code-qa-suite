The issue you're facing is likely due to the way you're copying your files into the Docker container. You're copying the `app` directory into `/app` in the container, but then you're running the command from the `/app` directory. This means that Python is looking for the `app` module in `/app/app`, which doesn't exist.

Here's a revised version of your Dockerfile:

```Dockerfile
# Use an official Python runtime as a parent image
FROM python:3.8

# Set the working directory in the container to /app
WORKDIR /app

# Copy the current directory contents into the container at /app
COPY ./app /app

# Install any needed packages specified in requirements.txt
COPY requirements.txt /app
RUN pip install --requirement /app/requirements.txt

# Make port 8000 available to the world outside this container
EXPOSE 8000

# Run the command to start uvicorn
CMD ["uvicorn", "main:app", "--host=0.0.0.0" , "--reload" , "--port", "8000"]
```

This Dockerfile changes the working directory to `/app`, copies the `app` directory from your host to `/app` in the container, and then runs the command from the `/app` directory. This should allow Python to find the `app` module.

Also, please make sure that your `docker-compose.yml` file has the correct configuration. Here's a basic example:

```yaml
version: '3'
services:
  web:
    build: .
    ports:
      - "8000:8000"
```

This will build the Dockerfile in the current directory and map port 8000 in the container to port 8000 on your host machine.