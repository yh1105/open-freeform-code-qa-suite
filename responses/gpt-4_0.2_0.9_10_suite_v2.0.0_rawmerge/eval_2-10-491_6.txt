Yes, there are several ways to express this in a more idiomatic way in Rust. Here are a few examples:

1. **Using `if let` with `else`**

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        if let Some(foo_val) = foo {
            if foo_val < 5 {
                // do nothing
            } else {
                foo.replace(5);
            }
        } else {
            foo.replace(5);
        }
    }
    ```

2. **Using `match` with `None` and `Some`**

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        match foo {
            Some(foo_val) if foo_val >= 5 => {},
            _ => { foo.replace(5); }
        }
    }
    ```

3. **Using `map_or`**

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        foo = foo.map_or(Some(5), |foo_val| if foo_val < 5 { Some(foo_val) } else { Some(5) });
    }
    ```

4. **Using `unwrap_or_else`**

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        foo = Some(*foo.get_or_insert_with(|| 5));
    }
    ```

5. **Using `or_else`**

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        foo = foo.or_else(|| Some(5));
    }
    ```

6. **Using `get_or_insert`**

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        let _ = foo.get_or_insert(5);
    }
    ```

All these examples will replace `foo` with `Some(5)` if `foo` is `None` or if the value inside `Some` is greater than or equal to `5`.