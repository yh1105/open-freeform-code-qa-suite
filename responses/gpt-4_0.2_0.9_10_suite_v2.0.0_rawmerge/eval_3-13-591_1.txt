The reason you're seeing log 2 before log 1 is because the `onItemSelected` function is an asynchronous callback. It gets called when an item is selected in the spinner, which may happen some time after your `setupListWithAdapter` function has returned.

The `setupListWithAdapter` function doesn't wait for an item to be selected in the spinner. It sets up the spinner and then immediately returns `itemSelected`, which at that point is still an empty string. That's why you're seeing log 2 with an empty string.

Later, when you select an item in the spinner, the `onItemSelected` function gets called, and you see log 1 with the selected item.

If you want to use the selected item outside of the `onItemSelected` function, you could consider using a higher-order function or a callback. Here's an example:

```kotlin
fun Spinner.setupListWithAdapter(list: MutableList<String>, callback: (String) -> Unit) {
    val adapter = ArrayAdapter(context, android.R.layout.simple_spinner_item, list)
    adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
    this.adapter = adapter
    this.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {
        override fun onItemSelected(p0: AdapterView<*>?, p1: View?, p2: Int, p3: Long) {
            val itemSelected = list[p2]
            Log.e("categoryLog","1 : " + itemSelected)
            callback(itemSelected)
        }
        override fun onNothingSelected(p0: AdapterView<*>?) {
        }
    }
}
```

You can then use this function like this:

```kotlin
mySpinner.setupListWithAdapter(myList) { selectedItem ->
    // Use selectedItem here
    Log.e("categoryLog","Outside : " + selectedItem)
}
```

In this example, the `callback` function gets called every time an item is selected in the spinner, with the selected item as its argument.