The warning is because Dart's null safety feature is enabled and `myMap[1]` can potentially return `null` if the key `1` is not found in the map. 

To solve this warning, you can use the null check operator (`!`). This will throw an exception if the value is `null`. 

Here is the corrected code:

```dart
void foo(Map<int, String> myMap) {
  if (myMap.containsKey(1)) {
    String s = myMap[1]!;
  }
}
```

However, be aware that using `!` will cause a runtime error if the value is `null`. If you want to avoid this, you can provide a default value using `??` operator:

```dart
void foo(Map<int, String> myMap) {
  String s = myMap[1] ?? 'default value';
}
```

In this case, if `myMap[1]` is `null`, `s` will be assigned the 'default value'.