You can use Python's multiprocessing module to run these two tasks concurrently. Here is how you can modify your code:

```python
import multiprocessing
from dash import Dash
import dash_bootstrap_components as dbc
import db
import hp
import fd

def run_dash():
    app = Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])
    database=db.dataBase()
    homepage=hp.homepage(database)
    homepage.timeUpdateCallback(app)
    homepage.gaugeRefreshCallback(app)
    app.layout = homepage.layoutMaker()
    app.run_server(debug=True)

def run_data_mining():
    database=db.dataBase()
    dataMiningScript= fd.financeData(database,1600)

if __name__ == "__main__":
    # Create processes
    p1 = multiprocessing.Process(target=run_dash)
    p2 = multiprocessing.Process(target=run_data_mining)

    # Start processes
    p1.start()
    p2.start()

    # Join processes
    p1.join()
    p2.join()
```

In this code, we define two functions `run_dash` and `run_data_mining` for running the Dash server and the data mining script respectively. We then create two separate processes for these functions and start them. 

Please note that the `multiprocessing` module spawns new processes and thus does not have the limitations of multithreading due to Python's Global Interpreter Lock. However, it does not share memory and is a bit heavier than threading. 

Also, be aware that if your `fd.financeData` function or `app.run_server` function has any code that should run only in main process, you should modify your code accordingly. 

Finally, please note that this code assumes that `db.dataBase()`, `hp.homepage(database)`, `homepage.timeUpdateCallback(app)`, `homepage.gaugeRefreshCallback(app)`, `homepage.layoutMaker()`, `fd.financeData(database,1600)` and `app.run_server(debug=True)` are all thread-safe. If they are not, you will need to add appropriate locks.