The issue you're experiencing is due to the use of single quotes around your variable `$searchT`. In bash, single quotes will not interpolate variables, they will be treated as literal strings. You should use double quotes instead.

Here's the corrected script:

```bash
#!/bin/bash
read -p "Enter search term here: " searchT

if [[ $(grep -wi "$searchT" test.txt) ]]; then     
    echo "$(grep -c "$searchT" test.txt) number of matches found"
    grep -wi "$searchT" test.txt
else 
    echo "No match found"    
fi

exit 0
```

Here's what changed:

1. I replaced `cat test.txt | grep -wi '$searchT'` with `grep -wi "$searchT" test.txt`. This is a more efficient way to use `grep` because it eliminates the need for `cat`.

2. I replaced `cat test.txt | grep '$searchT' && wc -l` with `grep -c "$searchT" test.txt`. The `-c` option in `grep` will count the number of matching lines, which is what you want.

3. I replaced the single quotes around `$searchT` with double quotes. This allows bash to interpolate the variable correctly.

4. I moved the `grep -wi "$searchT" test.txt` line to a new line for clarity. This line will print the matching lines from `test.txt`.