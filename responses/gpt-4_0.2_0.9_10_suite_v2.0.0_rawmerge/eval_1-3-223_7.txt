You can use the `pkg_resources` module to get the installed version of a package, and the `yolk3k` package to get the latest version available on PyPI. Here is a function that does this:

```python
import pkg_resources
from yolk.pip import Pip
from yolk.metadata import Metadata

def checkVersion(pkgName):
    # Get installed version
    try:
        installed_version = pkg_resources.get_distribution(pkgName).version
    except pkg_resources.DistributionNotFound:
        return False

    # Get latest version
    p = Pip()
    latest_version = None
    for dist, active in p.get_installed_distributions():
        if dist.project_name.lower() == pkgName.lower():
            metadata = Metadata(dist)
            latest_version = metadata.latest_version
            break

    # Compare versions
    if latest_version is None:
        return False
    else:
        return installed_version == latest_version
```

Please note that this function will return `False` if the package is not installed or if it cannot find the latest version on PyPI. You may want to handle these cases differently depending on your needs.

Also, please note that the `yolk3k` package is not maintained anymore. If you want to use a more up-to-date package, you can use `pipdate` instead. Here is how you can modify the function to use `pipdate`:

```python
import pkg_resources
from pipdate import check

def checkVersion(pkgName):
    # Get installed version
    try:
        installed_version = pkg_resources.get_distribution(pkgName).version
    except pkg_resources.DistributionNotFound:
        return False

    # Get latest version
    latest_version = check(pkgName)

    # Compare versions
    if latest_version is None:
        return False
    else:
        return installed_version == latest_version
```

In this version of the function, `pipdate.check(pkgName)` will return the latest version of the package on PyPI, or `None` if the package is not found.