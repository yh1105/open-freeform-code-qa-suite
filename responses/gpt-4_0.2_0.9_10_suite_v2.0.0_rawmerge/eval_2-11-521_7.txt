The comment is partially correct. 

A constructor is indeed not a function in the traditional sense, but it is a special method in a class. In object-oriented programming, a constructor is a special method that is used to initialize a newly created object and it's automatically called when an object of a class is created. 

However, the comment is incorrect in saying that a constructor cannot be called. In some languages like JavaScript, you can explicitly call a constructor using the `new` keyword. For example:

```javascript
class MyClass {
  constructor() {
    console.log('Constructor was called');
  }
}

let obj = new MyClass(); // Outputs: Constructor was called
```

In this example, the constructor is called when `new MyClass()` is executed. 

In other languages like Java or C++, you don't directly call the constructor, but it gets called when you create a new instance of the class.

```java
public class MyClass {
    public MyClass() {
        System.out.println("Constructor was called");
    }
}

MyClass obj = new MyClass(); // Outputs: Constructor was called
```

In this Java example, the constructor is called when `new MyClass()` is executed. So, while you don't directly call the constructor like a regular method, it is invoked when a new object is created.