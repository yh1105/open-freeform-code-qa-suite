Yes, there are several ways to express this in a more idiomatic way in Rust. Here are a few examples:

1. **Using `if let` with a condition:**

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        if let Some(foo_val) = foo {
            if foo_val < 5 {
                foo.replace(5);
            }
        } else {
            foo.replace(5);
        }
    }
    ```

2. **Using `match` with a condition and a default case:**

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        match foo {
            Some(foo_val) if foo_val >= 5 => {},
            _ => { foo.replace(5); }
        }
    }
    ```

3. **Using `map_or` method:**

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        foo = foo.map_or(Some(5), |foo_val| if foo_val < 5 { Some(5) } else { Some(foo_val) });
    }
    ```

4. **Using `unwrap_or` method:**

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        foo = Some(foo.unwrap_or(5));
    }
    ```

    Note: This will replace the value in `foo` regardless of the original value.

5. **Using `or_else` method:**

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        foo = foo.or_else(|| Some(5));
    }
    ```

    Note: This will replace the value in `foo` only if it was `None`.

6. **Using `and_then` method:**

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        foo = foo.and_then(|foo_val| if foo_val < 5 { Some(5) } else { Some(foo_val) });
    }
    ```

    Note: This will replace the value in `foo` only if it was `Some` and the inner value is less than 5.