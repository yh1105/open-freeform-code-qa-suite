Sure, you can achieve this by using the `groupby` and `cumsum` functions provided by pandas. Here is the function you asked for:

```python
def aggregation(df):
    # Convert the 'value' column to integer type
    df['value'] = df['value'].astype(int)
    
    # Create a new column 'balance' where 'type' equals 'deposit', otherwise NaN
    df['balance'] = df.loc[df['type'] == 'deposit', 'value']
    
    # Group by 'exchange' and calculate the cumulative sum, then forward fill the NaN values
    df['balance'] = df.groupby('exchange')['balance'].cumsum().ffill()
    
    return df
```

This function first converts the 'value' column to integer type. Then it creates a new column 'balance' where it copies the values from 'value' column if 'type' equals 'deposit', otherwise it puts NaN. After that, it groups the DataFrame by 'exchange' and calculates the cumulative sum of 'balance' within each group. Finally, it fills the NaN values with the last observed non-NaN value within each group.