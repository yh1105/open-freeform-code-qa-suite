You can use the `react-intersection-observer` npm package to detect whether an element is in the viewport or not. 

First, install the package:

```bash
npm install react-intersection-observer
```

Then, you can use the `InView` component from the package to wrap the divs you want to observe. Here's an example:

```javascript
import React from 'react';
import { InView } from 'react-intersection-observer';

const ParentComponent = ({ data }) => (
  <div id="parent">
    {data.map(item => (
      <InView key={item.id}>
        {({ inView, ref }) => (
          <div id={item.id} ref={ref}>
            {inView ? 'In viewport' : 'Not in viewport'}
            {item.title}
          </div>
        )}
      </InView>
    ))}
  </div>
);

export default ParentComponent;
```

In this example, `InView` is a component that uses the Intersection Observer API to check if an element is in the viewport. It provides a function as a child that gives you the `inView` state (a boolean indicating whether the element is in the viewport or not) and a `ref` that you should assign to the element you want to observe.

This way, you can easily check which divs are in the viewport and react to changes in their visibility.

Please note that the Intersection Observer API is not supported in all browsers. You can check the current browser support on Can I use. If you need to support a browser that doesn't have native support, you can use a polyfill like `intersection-observer`.