Your second way of removing duplicates using a `HashSet` is already quite efficient and simple. It uses the `HashSet`'s property of not allowing duplicate entries to filter out duplicates from your array.

However, if you want to make it even simpler, you could use the `dedup_by` method provided by Rust's `slice` type. This method removes consecutive duplicate elements of the slice in-place.

Here's an example:

```rust
#[derive(Debug, PartialEq, Eq)]
struct Person {
    name: String,
    age: u32,
}

fn main() {
    let mut arr = vec![
        Person { name: "aaa".to_string(), age: 10 },
        Person { name: "bbb".to_string(), age: 20 },
        Person { name: "bbb".to_string(), age: 20 },
        Person { name: "ccc".to_string(), age: 30 },
    ];

    arr.sort_by(|a, b| a.name.cmp(&b.name));
    arr.dedup_by(|a, b| a.name == b.name);

    dbg!(arr);
}
```

Note that `dedup_by` only removes consecutive duplicates, so you need to sort the array first if the duplicates are not consecutive. Also, this method works in-place, so it modifies the original array instead of creating a new one.

Please note that `dedup_by` only works with `Vec` and not with arrays. If you have an array, you'll need to convert it to a `Vec` first.