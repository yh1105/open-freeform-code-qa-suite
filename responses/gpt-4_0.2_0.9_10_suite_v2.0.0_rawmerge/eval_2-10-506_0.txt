You can use the `iter()` method in combination with the `min()` function to get the minimum value of a vector in Rust. Here is how you can do it:

```rust
let v = vec![5, 6, 8, 4, 2, 7];
let min = v.iter().min();

match min {
    Some(min) => println!("The minimum value is {}", min),
    None => println!("The vector is empty"),
}
```

In this code, `v.iter().min()` returns an `Option<&i32>` that contains the minimum value. If the vector is empty, `min()` returns `None`, otherwise it returns `Some(min_value)`.

Please note that `min()` returns a reference to the minimum value, not the value itself. If you want the value, you can dereference it like `*min.unwrap()`, but be careful because `unwrap()` will panic if the `Option` is `None` (i.e., if the vector is empty). It's safer to use a match statement or `if let` to handle the `Option` as shown above.