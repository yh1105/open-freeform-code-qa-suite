In Rust, you can't set a field in a struct to an "empty" value if the field's type doesn't have a concept of an "empty" value. In your case, `TcpStream` doesn't have a default or "empty" value.

The idiomatic way to handle this in Rust is to use the `Option` type. `Option` is an enum that can either be `Some(T)` where `T` is the actual value, or `None` which represents the absence of a value.

Here's how you can modify your code to use `Option<TcpStream>`:

```rust
use std::net::TcpStream;
use std::io;

pub struct FistClient {
    addr: String,
    conn: Option<TcpStream>,
}

impl FistClient {
    pub fn new(ip: &str, port: &str) -> Self {
        FistClient {
            addr: String::from(ip) + ":" + &String::from(port),
            conn: None,
        }
    }

    pub fn connect(&mut self) -> io::Result<()> {
        let res = TcpStream::connect(&self.addr);
        match res {
            Ok(c) => {
                self.conn = Some(c);
                Ok(())
            },
            Err(e) => Err(e),
        }
    }
}
```

In the `new` method, `conn` is set to `None` to represent the absence of a value. In the `connect` method, `conn` is set to `Some(c)` when a connection is successfully established. The `connect` method now returns a `Result` to allow error handling to be done by the caller instead of panicking within the method itself.