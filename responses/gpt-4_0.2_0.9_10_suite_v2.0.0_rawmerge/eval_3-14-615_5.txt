No, as of SwiftUI 2.0, there's no built-in way to get the current scroll position of a `ScrollView`. The `ScrollViewReader` and `ScrollViewProxy` only provide the `scrollTo` method, which allows you to programmatically set the scroll position, but not get it.

However, you can use `UIKit`'s `UIScrollView` and `UIViewControllerRepresentable` to create a SwiftUI view that allows you to get the current scroll position. This involves more code and is less "Swifty", but it's currently the only workaround.

Here's a basic example:

```swift
import SwiftUI
import UIKit

struct ContentView: View {
    var body: some View {
        ScrollViewWithOffset { offset in
            print("Offset: \(offset)")
        } content: {
            ForEach(0..<100) { i in
                Text("Item \(i)")
            }
        }
    }
}

struct ScrollViewWithOffset<Content: View>: View {
    let onOffsetChange: (CGFloat) -> Void
    let content: () -> Content

    init(onOffsetChange: @escaping (CGFloat) -> Void, @ViewBuilder content: @escaping () -> Content) {
        self.onOffsetChange = onOffsetChange
        self.content = content
    }

    var body: some View {
        ScrollViewRepresentable(onOffsetChange: onOffsetChange, content: self.content)
    }
}

struct ScrollViewRepresentable<Content: View>: UIViewControllerRepresentable {
    typealias UIViewControllerType = ScrollViewUIHostingController<Content>

    let onOffsetChange: (CGFloat) -> Void
    let content: () -> Content

    func makeUIViewController(context: Context) -> UIViewControllerType {
        ScrollViewUIHostingController(rootView: self.content(), onOffsetChange: self.onOffsetChange)
    }

    func updateUIViewController(_ uiViewController: UIViewControllerType, context: Context) {
        uiViewController.rootView = self.content()
    }
}

class ScrollViewUIHostingController<Content: View>: UIHostingController<Content> {
    let onOffsetChange: (CGFloat) -> Void

    init(rootView: Content, onOffsetChange: @escaping (CGFloat) -> Void) {
        self.onOffsetChange = onOffsetChange
        super.init(rootView: rootView)
    }

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    override func viewDidAppear(_ animated: Bool) {
