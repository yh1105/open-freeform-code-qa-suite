The problem is that you are trying to format a `LocalDate` object which does not contain time information. You should use `ZonedDateTime` or `LocalDateTime` instead. 

Here is the corrected code:

```java
import java.time.*;
import java.time.format.DateTimeFormatter;
import java.util.*;

public class Main {
    public static void main(String[] args) {
        System.out.println(generateRandomDateAndTimeInString());
    }

    public static String generateRandomDateAndTimeInString() {
        LocalDateTime dateTime = LocalDateTime.now().minusDays(new Random().nextInt(365 * 70));
        System.out.println("date and time :: " + dateTime.toString());
        return formatDate(dateTime);
    }

    public static String formatDate(LocalDateTime dateTime){
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss'Z'");
        return dateTime.atZone(ZoneId.systemDefault()).format(formatter);
    }
}
```

In this code, `LocalDateTime.now().minusDays(new Random().nextInt(365 * 70))` generates a random date and time in the past 70 years. `DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss'Z'")` is used to format the date and time. `dateTime.atZone(ZoneId.systemDefault())` converts `LocalDateTime` to `ZonedDateTime` which includes the timezone information.

Please note that the 'Z' in the pattern stands for the Zulu timezone (UTC+0). If you want to format the date and time in the system's default timezone, you should remove 'Z' from the pattern. If you want to format the date and time in UTC, you should replace `ZoneId.systemDefault()` with `ZoneOffset.UTC`.