You can use the `react-intersection-observer` package from npm to detect if an element is in the viewport. This package uses the Intersection Observer API to tell you when an element enters or leaves the viewport.

First, install the package:

```bash
npm install react-intersection-observer
```

Then, you can use the `useInView` hook from this package in your component:

```javascript
import React from 'react';
import { useInView } from 'react-intersection-observer';

const MyComponent = () => {
  const [ref, inView] = useInView({
    triggerOnce: false, // Change this to true if you want the event to be triggered only once
  });

  return (
    <div id="parent">
      {data.map(item => {
        const [ref, inView] = useInView({
          triggerOnce: false,
        });

        return (
          <div ref={ref} id={item.id}>
            {inView ? 'In viewport' : 'Not in viewport'}
            {data.title}
          </div>
        );
      })}
    </div>
  );
};

export default MyComponent;
```

In this code, `useInView` returns a `ref` that you can attach to the divs. It also returns `inView`, a boolean that tells you whether the element is in the viewport or not. You can use this boolean to conditionally render something based on whether the div is in the viewport.

Please note that the Intersection Observer API is not supported in all browsers. You can check the current browser compatibility on the [MDN web docs](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API#browser_compatibility). If you need to support a browser that doesn't have this API, you might need to use a polyfill.