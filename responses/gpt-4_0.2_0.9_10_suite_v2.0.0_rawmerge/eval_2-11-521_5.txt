The comment is partially correct. A constructor is indeed not a regular function, but it can be called, albeit not in the traditional sense. 

In object-oriented programming, a constructor is a special method that is used to initialize a newly created object. It is automatically invoked at the time of object creation. 

However, the statement "A constructor cannot be called" is not entirely accurate. In some programming languages like JavaScript, you can call a constructor directly using the `new` keyword. For example:

```javascript
function MyClass() {
  // Constructor code here
}

var obj = new MyClass(); // Here we are "calling" the constructor
```

In other languages like Java or C++, you don't explicitly "call" the constructor like a regular function, but you do invoke it when you create a new instance of a class:

```java
public class MyClass {
  public MyClass() {
    // Constructor code here
  }
}

MyClass obj = new MyClass(); // Here we are "calling" the constructor
```

So, while it's true that a constructor isn't a regular function and is automatically invoked when creating a new object, it's not entirely accurate to say it "cannot be called". It's more precise to say it's not called in the same way as a regular function.