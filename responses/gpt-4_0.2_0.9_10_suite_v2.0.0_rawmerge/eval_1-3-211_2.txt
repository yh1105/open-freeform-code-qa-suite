Sure, you can achieve this by using the `groupby`, `apply`, and `fillna` methods provided by pandas. Here is the function:

```python
def aggregation(df):
    # Convert the 'value' column to numeric
    df['value'] = pd.to_numeric(df['value'])

    # Create a new column 'balance' where 'type' is 'deposit' and fill the rest with NaN
    df['balance'] = df.loc[df['type'] == 'deposit', 'value']

    # Group by 'exchange' and calculate the cumulative sum, then forward fill the NaN values
    df['balance'] = df.groupby('exchange')['balance'].apply(lambda x: x.cumsum()).fillna(method='ffill')

    # Fill remaining NaN values with 0
    df['balance'] = df['balance'].fillna(0)

    return df
```

This function first converts the 'value' column to numeric, then creates a new column 'balance' where 'type' is 'deposit' and fills the rest with NaN. It then groups by 'exchange' and calculates the cumulative sum, then forward fills the NaN values. Finally, it fills the remaining NaN values with 0.