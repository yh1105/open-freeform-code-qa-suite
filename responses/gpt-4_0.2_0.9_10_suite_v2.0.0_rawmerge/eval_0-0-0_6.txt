Sure, here is a function `keys_and_prices(raw_obj)` that does what you want:

```javascript
function keys_and_prices(raw_obj) {
    let keys = [];
    let prices = [];
    for (let key in raw_obj) {
        if (raw_obj.hasOwnProperty(key)) {
            keys.push(key);
            prices.push(raw_obj[key].price);
        }
    }
    return [keys, prices];
}
```

This function iterates over the keys in the `raw_obj` object. For each key, it pushes the key into the `keys` array and the corresponding price into the `prices` array. Finally, it returns an array containing the `keys` and `prices` arrays.

You can use it with your `itemsToBuy` object like this:

```javascript
var itemsToBuy = { milk: { quantity : 5, price: 20 }, bread: { quantity : 2, price: 15 }, potato: { quantity : 3, price: 10 } }
let ret = keys_and_prices(itemsToBuy)
console.log(ret[0]) // ["milk", "bread", "potato"]
console.log(ret[1]) // [20, 15, 10]
```

Please note that the order of keys in JavaScript objects is not guaranteed, so the order of elements in the returned arrays may not match the order in which they were added to the object. If you need to maintain a specific order, you may want to use a different data structure, such as a Map.