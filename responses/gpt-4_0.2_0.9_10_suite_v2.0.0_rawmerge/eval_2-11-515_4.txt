```c++
#include <vector>
#include <utility>
#include <algorithm>
#include <iterator>

std::vector<std::pair<int, int>> origin_to_goal(std::vector<int> origin) {
    std::vector<std::pair<int, int>> goal(origin.size() / 2);
    std::transform(origin.begin(), origin.end(), goal.begin(), [&origin](int& n) {
        static int i = 0;
        return std::make_pair(origin[i++], origin[i++]);
    });
    return goal;
}
```
This function uses the `std::transform` algorithm from the Standard Library to create pairs of elements from the original vector. The lambda function passed to `std::transform` captures the `origin` vector by reference and uses a static local variable `i` to access pairs of elements. The `std::make_pair` function is used to create the pairs.