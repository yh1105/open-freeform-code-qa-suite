You can solve this problem by first dividing the number into `n` parts and then distributing the remainder among the parts by adding 2 to each part in succession. Here is a Python function that implements this logic:

```python
def divideNumber(num, n):
    # Calculate the quotient and remainder
    quotient, remainder = divmod(num, n)
    
    # Create a list with 'n' parts of 'quotient'
    result = [quotient] * n

    # Distribute the remainder among the parts
    i = 0
    while remainder > 0:
        # Add 2 to the current part if possible
        if remainder >= 2:
            result[i] += 2
            remainder -= 2
        # Otherwise, add the remaining 1
        else:
            result[i] += remainder
            remainder = 0
        # Move to the next part
        i = (i + 1) % n

    return result
```

You can test this function with your example:

```python
print(divideNumber(100, 3))  # Output: [34, 34, 32]
```

This function works by first dividing the number into equal parts and then distributing the remainder among the parts by adding 2 to each part in succession. The `% n` operation ensures that we loop back to the first part when we reach the end of the list.