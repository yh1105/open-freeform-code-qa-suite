Sure, here is a function that does exactly what you want:

```javascript
function keys_and_prices(raw_obj) {
    let keys = [];
    let prices = [];
    for (let key in raw_obj) {
        if (raw_obj.hasOwnProperty(key)) {
            keys.push(key);
            prices.push(raw_obj[key].price);
        }
    }
    return [keys, prices];
}
```

This function iterates over the keys in the `raw_obj` object. For each key, it adds the key to the `keys` array and the corresponding price to the `prices` array. Finally, it returns an array containing the `keys` and `prices` arrays.

Please note that the `assert` function you used in your example is not a standard JavaScript function. If you want to compare arrays, you should use a function that compares the elements of the arrays, not the arrays themselves. Here is an example of how you can do this:

```javascript
function arraysEqual(a, b) {
    if (a === b) return true;
    if (a == null || b == null) return false;
    if (a.length != b.length) return false;

    for (let i = 0; i < a.length; ++i) {
        if (a[i] !== b[i]) return false;
    }
    return true;
}

var itemsToBuy = { milk: { quantity : 5, price: 20 }, bread: { quantity : 2, price: 15 }, potato: { quantity : 3, price: 10 } }
let ret = keys_and_prices(itemsToBuy)
console.assert(arraysEqual(ret[0], ["milk", "bread", "potato"]))
console.assert(arraysEqual(ret[1], [20, 15, 10]))
```

This `arraysEqual` function compares two arrays element by element and returns `true` if they are equal and `false` otherwise.