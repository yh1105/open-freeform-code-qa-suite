To create an index in Mongoose schema using Nest.js, you can use the `@Prop` decorator with the `index` option set to `true` as you did. However, you need to ensure that the index is actually created in the database. This can be done by calling the `ensureIndexes()` function on the model.

Here is how you can do it:

```javascript
import { Injectable, OnModuleInit } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';

@Injectable()
export class MyService implements OnModuleInit {
  constructor(@InjectModel(Schema.name) private readonly myModel: Model<Schema>) {}

  async onModuleInit() {
    await this.myModel.init();
    await this.myModel.ensureIndexes(); // This will ensure the index is created
  }
}
```

In the above code, `MyService` is a service that injects the Mongoose model for your schema. The `onModuleInit` lifecycle hook is used to ensure the indexes are created when the module is initialized.

Please replace `MyService` and `Schema` with your actual service and schema names.

Also, remember that creating an index can take some time if you have a lot of data in your collection. So, it's a good practice to create indexes during off-peak hours or while your application is starting up.