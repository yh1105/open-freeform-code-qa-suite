Sure, you can achieve this using the `groupby`, `cumsum` and `apply` functions provided by pandas. Here is the function `aggregation`:

```python
def aggregation(df):
    # Convert the 'value' column to integer type
    df['value'] = df['value'].astype(int)

    # Create a new column 'balance' which is the cumulative sum of 'value' where 'type' is 'deposit', grouped by 'exchange'
    df['balance'] = df[df['type'] == 'deposit'].groupby('exchange')['value'].cumsum()

    # Forward fill the 'balance' column within each 'exchange' group
    df['balance'] = df.groupby('exchange')['balance'].ffill()

    # Fill any remaining NaN values with 0
    df['balance'] = df['balance'].fillna(0)

    return df
```

This function first converts the 'value' column to integer type. Then it creates a new column 'balance' which is the cumulative sum of 'value' where 'type' is 'deposit', grouped by 'exchange'. The 'balance' column is then forward filled within each 'exchange' group. Finally, any remaining NaN values in the 'balance' column are filled with 0. The modified DataFrame is returned.