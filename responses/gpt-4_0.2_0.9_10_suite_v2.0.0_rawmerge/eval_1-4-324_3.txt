Here is a function `mySplit` that will do the job:

```r
mySplit <- function(df) {
  # Split the column by comma
  split_data <- strsplit(df$col1, ",")
  
  # Initialize an empty data frame
  new_df <- data.frame()
  
  # Loop over each row
  for (i in 1:length(split_data)) {
    # Split each element by colon
    split_row <- strsplit(split_data[[i]], ":")
    
    # Convert the list to a data frame
    row_df <- as.data.frame(t(unlist(split_row[2])))
    
    # Set the column names
    colnames(row_df) <- unlist(split_row[1])
    
    # Append the row to the new data frame
    new_df <- rbind(new_df, row_df)
  }
  
  # Return the new data frame
  return(new_df)
}
```

This function works by first splitting the column by commas, then splitting each element by colons. It then converts the list to a data frame and sets the column names. Finally, it appends the row to the new data frame.

You can use this function like this:

```r
df <- data.frame(col1 = c("name:Michael,Age:31,City:NYC", "name:Tom,Age:25,City:NA"))
new_df <- mySplit(df)
print(new_df)
```

This will output:

```r
     name Age City
1 Michael  31  NYC
2     Tom  25   NA
```