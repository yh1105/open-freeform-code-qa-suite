The comment is partially correct. 

In object-oriented programming, a constructor is a special type of subroutine called to create an object. It prepares the new object for use, often accepting arguments that the constructor uses to set required member variables.

The part where the comment is correct is that constructors are indeed invoked automatically when a new object is created. This is a fundamental aspect of object-oriented programming.

However, the part where the comment is incorrect is when it states that a constructor cannot be called because it's not a function. In many programming languages, including JavaScript, Python, and C++, constructors are indeed special types of functions/methods. They can be called directly, although this is not common practice because it can lead to confusion and unexpected behavior.

For example, in JavaScript, you can call a constructor directly like this:

```javascript
function MyClass() {
  this.myProperty = "Hello";
}

// Create a new object using the constructor
var myObject = new MyClass();

// Call the constructor directly
MyClass.call(myObject);
```

In this example, `MyClass.call(myObject);` is calling the constructor directly. However, this is not a common or recommended practice. It's generally best to let the language's `new` keyword handle calling the constructor.