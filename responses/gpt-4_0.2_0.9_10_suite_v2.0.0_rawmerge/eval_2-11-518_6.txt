The Rule of Five is not outdated, but it's true that modern C++ practices have reduced its necessity in many cases. 

Smart pointers, such as `std::unique_ptr` and `std::shared_ptr`, do indeed manage their own resources, which can eliminate the need for user-defined destructors, copy constructors, copy assignment operators, move constructors, and move assignment operators in many cases. 

However, there are still situations where the Rule of Five applies. Here are a few examples:

1. **When you're managing a resource that isn't memory.** Smart pointers are great for managing memory, but not all resources are memory. If your class manages a file, a network connection, a database transaction, or some other non-memory resource, you may still need to define these five functions.

2. **When you're interfacing with C or other non-C++ code.** If you're writing a C++ wrapper around a C library, for example, you may need to manage resources in a way that smart pointers can't handle.

3. **When you're writing a data structure or algorithm that requires unusual ownership semantics.** For example, if you're writing a data structure that needs to take ownership of an object in some cases but not others, you might need to define these five functions.

4. **When you're writing a class that needs to control its own copying behavior.** For example, if you're writing a class that represents a shared resource, you might want to disallow copying entirely by deleting the copy constructor and copy assignment operator.

So while it's true that modern C++ practices have reduced the need for the Rule of Five, it's still a useful guideline for when you need to manage resources manually.