The Rule of Five is not necessarily outdated, but it's true that modern C++ practices and features like smart pointers have reduced the need for it in many cases. 

The Rule of Five is particularly important when dealing with raw owning pointers, as you need to correctly manage the memory to avoid leaks or double-deletions. However, if you use smart pointers (like `std::unique_ptr` or `std::shared_ptr`), they automatically handle the memory management for you, and you don't need to write these special member functions yourself.

That said, there are still cases where you might need to follow the Rule of Five. For example:

1. If you're interfacing with C-style code or a library that gives you raw pointers, you might need to manage the memory yourself.
2. If you're writing a low-level data structure or a memory management library, you might need finer control over memory than what smart pointers provide.
3. If you're writing a class that needs to control its copy or move semantics in a non-default way. For example, you might want copying to be deep instead of shallow, or you might want to disallow copying altogether.

So while it's true that modern C++ features have made the Rule of Five less necessary in many cases, it's still a good rule to know and understand. It's not so much that it's outdated, but rather that good C++ style has evolved to avoid needing it as much.