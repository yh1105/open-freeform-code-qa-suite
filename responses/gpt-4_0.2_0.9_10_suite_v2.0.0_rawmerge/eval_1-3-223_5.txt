You can use the `pkg_resources` module to get the installed version of a package, and the `pip` module to get the latest version available on PyPI. Here is a function that does this:

```python
import pkg_resources
import xmlrpc.client

def checkVersion(pkgName):
    pypi = xmlrpc.client.ServerProxy('https://pypi.python.org/pypi')
    available = pypi.package_releases(pkgName)
    if not available:  # package not found
        return False

    installed_version = pkg_resources.get_distribution(pkgName).version
    latest_version = available[0]

    return installed_version == latest_version
```

This function uses the `xmlrpc.client.ServerProxy` to connect to PyPI and get the available versions of the package. It then gets the installed version using `pkg_resources.get_distribution(pkgName).version`. If the installed version is the same as the latest version available on PyPI, the function returns `True`; otherwise, it returns `False`.

Please note that this function will raise a `DistributionNotFound` exception if the package is not installed. You might want to handle this exception in your code.