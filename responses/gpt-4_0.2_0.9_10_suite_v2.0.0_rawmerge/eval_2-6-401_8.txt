You can create a factory that will generate `ServiceBusSender` instances for different queues. Here's an example of how you can do it:

First, create a factory interface:

```c#
public interface IServiceBusClientFactory
{
    ServiceBusSender CreateSender(string queueName);
}
```

Then, implement this interface:

```c#
public class ServiceBusClientFactory : IServiceBusClientFactory
{
    private readonly ServiceBusClient _serviceBusClient;

    public ServiceBusClientFactory(string connectionString)
    {
        _serviceBusClient = new ServiceBusClient(connectionString, new ServiceBusClientOptions
        {
            TransportType = ServiceBusTransportType.AmqpWebSockets
        });
    }

    public ServiceBusSender CreateSender(string queueName)
    {
        return _serviceBusClient.CreateSender(queueName);
    }
}
```

Register this factory in your DI container:

```c#
_services.TryAddSingleton<IServiceBusClientFactory>(implementationFactory =>
{
    var serviceBusConfiguration = implementationFactory.GetRequiredService<Microsoft.Extensions.Options.IOptions<UserEventConsumerSetting>>().Value;

    return new ServiceBusClientFactory(serviceBusConfiguration.ServiceBusConnectionString);
});
```

Now you can inject `IServiceBusClientFactory` into your services and create `ServiceBusSender` for any queue:

```c#
public class CarReservationMessagingService
{
    private readonly ServiceBusSender _serviceBusSender;

    public CarReservationMessagingService(IServiceBusClientFactory serviceBusClientFactory)
    {
        _serviceBusSender = serviceBusClientFactory.CreateSender("yourQueueName");
    }

    // ...
}
```

This way, you can create `ServiceBusSender` for different queues using the same `ServiceBusClient` instance.