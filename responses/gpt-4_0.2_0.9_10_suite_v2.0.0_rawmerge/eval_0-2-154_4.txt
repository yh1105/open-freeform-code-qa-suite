Sure, here is a generator function that uses recursion to handle nested tags:

```javascript
function* iterLeafNodes(strHTML, format = []) {
  const parser = new DOMParser();
  const doc = parser.parseFromString(strHTML, "text/html");
  const body = doc.body;

  function* traverse(node, format = []) {
    if (node.nodeType === Node.TEXT_NODE) {
      yield { text: node.nodeValue, format };
    } else if (node.nodeType === Node.ELEMENT_NODE) {
      format = [...format, node.nodeName.toLowerCase()];
      for (const child of node.childNodes) {
        yield* traverse(child, format);
      }
    }
  }

  for (const child of body.childNodes) {
    yield* traverse(child, format);
  }
}
```

This function will traverse through each node in the HTML string. If it encounters a text node, it yields an object with the text and its format. If it encounters an element node, it adds the tag name to the format array and recursively traverses its child nodes.