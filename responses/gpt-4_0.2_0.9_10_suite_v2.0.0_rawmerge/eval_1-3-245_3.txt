The issue you're facing is likely due to the way your Dockerfile is set up. The Dockerfile is copying the requirements.txt file to the root directory, but it should be copied to the `/app` directory. 

Here's the corrected Dockerfile:

```Dockerfile
FROM python:3.8
WORKDIR /app

COPY ./app/requirements.txt /app/
RUN pip install --requirement /app/requirements.txt

COPY ./app /app

EXPOSE 8000
CMD ["uvicorn", "main:app", "--host=0.0.0.0" , "--reload" , "--port", "8000"]
```

This Dockerfile first sets the working directory in the container to `/app`. Then it copies the `requirements.txt` file from your local `app` directory to the `/app` directory in the container. It then installs the Python dependencies listed in `requirements.txt`. After that, it copies the rest of your local `app` directory to the `/app` directory in the container. Finally, it runs the command to start your FastAPI application.

Also, make sure that your `docker-compose.yml` file is correctly set up. Here's an example:

```yaml
version: '3'
services:
  web:
    build: .
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - .:/app
    ports:
      - 8000:8000
```

This `docker-compose.yml` file sets up a single service, `web`, that builds from the current directory (as specified by the `.`), runs the command to start your FastAPI application, mounts the current directory to `/app` in the container, and maps port 8000 in the container to port 8000 on the host machine.