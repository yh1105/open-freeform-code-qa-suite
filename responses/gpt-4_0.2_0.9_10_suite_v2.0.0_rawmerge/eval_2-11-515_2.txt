Here is the implementation of the function `origin_to_goal` using `std::transform` from the standard library:

```c++
#include <vector>
#include <utility>
#include <algorithm>
#include <iterator>

std::vector<std::pair<int, int>> origin_to_goal(std::vector<int> origin) {
    std::vector<std::pair<int, int>> goal(origin.size() / 2);
    std::transform(origin.begin(), origin.end(), goal.begin(), 
        [it = origin.begin()] (int&) mutable {
            return std::make_pair(*it++, *it++);
        });
    return goal;
}
```
This function works by creating a new vector of pairs `goal` with half the size of the original vector `origin`. Then it uses `std::transform` to iterate over the `origin` vector and for each pair of elements, it creates a pair and stores it in the `goal` vector. The lambda function captures the iterator `it` by reference and increments it twice for each pair.