Here is a possible implementation of the function `fun`. This implementation uses variadic templates and `std::array` to store the arguments. The `std::array` is created on the stack, so there are no heap memory allocations. 

```c++
#include <array>

struct Foo
{
    int a, b, c;
};

template <uint32_t argsCount, typename T, typename... Args>
void fun(Args... args) // max number of args == argsCount
{
    static_assert(sizeof...(Args) <= argsCount, "Too many arguments passed to fun");

    std::array<T, argsCount> arr{ args... };
    // Now you can use arr to access the arguments
    // For example, print the first element of each Foo in arr
    for (const auto& foo : arr) {
        std::cout << foo.a << std::endl;
    }
}

int main()
{
    fun<3, Foo>( { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } );
    return 0;
}
```

This code will compile and run in C++14 and newer versions. The `static_assert` is used to ensure that the number of arguments passed to `fun` does not exceed `argsCount`. If this condition is not met, a compile-time error will be generated.