The problem is that you're trying to format a `LocalDate` object which only contains date information (year, month, day) but not time information (hour, minute, second). Therefore, you cannot format it with a pattern that includes time.

To solve this, you should use `LocalDateTime` instead of `LocalDate`. `LocalDateTime` includes both date and time information.

Here's how you can modify your code:

```java
import java.time.LocalDateTime;
import java.time.Period;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.util.Random;

public class Main {
    public static void main(String[] args) {
        System.out.println(generateRandomDateAndTimeInString());
    }

    public static String generateRandomDateAndTimeInString() {
        LocalDateTime dateTime = LocalDateTime.now().minus(Period.ofDays((new Random().nextInt(365 * 70))));
        System.out.println("date and time :: " + dateTime.toString());
        return formatDate(dateTime);
    }

    public static String formatDate(LocalDateTime dateTime){
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss'Z'");
        return dateTime.atZone(ZoneOffset.UTC).format(formatter);
    }
}
```

In this code, `LocalDateTime.now().minus(Period.ofDays((new Random().nextInt(365 * 70))))` generates a random date and time. `DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss'Z'")` is used to format the date and time. `dateTime.atZone(ZoneOffset.UTC).format(formatter)` converts the `LocalDateTime` to a `ZonedDateTime` at UTC and formats it.

Please note that the 'Z' in the date-time pattern stands for the Zulu time zone, which is equivalent to UTC. If you want to use the system's default time zone, you can replace `ZoneOffset.UTC` with `ZoneId.systemDefault()`.