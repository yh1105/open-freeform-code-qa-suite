Sure, here is a function `keys_and_prices(raw_obj)` that does what you want:

```javascript
function keys_and_prices(raw_obj) {
    let keys = [];
    let prices = [];
    for (let key in raw_obj) {
        if (raw_obj.hasOwnProperty(key)) {
            keys.push(key);
            prices.push(raw_obj[key].price);
        }
    }
    return [keys, prices];
}
```

This function uses a `for...in` loop to iterate over the keys in the `raw_obj` object. For each key, it checks if the key is a direct property of the object (not inherited from the prototype chain) using `hasOwnProperty()`. If it is, the function pushes the key to the `keys` array and the corresponding price to the `prices` array. Finally, it returns an array containing the `keys` and `prices` arrays.

You can use this function with your example like this:

```javascript
var itemsToBuy = { milk: { quantity : 5, price: 20 }, bread: { quantity : 2, price: 15 }, potato: { quantity : 3, price: 10 } }
let ret = keys_and_prices(itemsToBuy)
console.log(ret[0]) // ["milk", "bread", "potato"]
console.log(ret[1]) // [20, 15, 10]
```

Please note that the `==` operator in JavaScript performs type coercion if the types of the two variables are not the same. If you want to check both the value and the type, you should use the `===` operator. In your case, `assert(ret[0] === ["milk", "bread", "potato"])` and `assert(ret[1] === [20, 15, 10])` would be more appropriate. However, these assertions will fail because `===` checks for reference equality for arrays, not structural equality. You might want to compare the arrays element by element or use a library that supports deep equality checks.