You can use the `react-intersection-observer` npm module to detect whether an element is in the viewport or not. 

First, install the module using npm:

```bash
npm install react-intersection-observer
```

Then, you can use the `useInView` hook from `react-intersection-observer` to track the visibility of each div. Here is an example:

```jsx
import React from 'react';
import { useInView } from 'react-intersection-observer';

const MyComponent = ({ data }) => {
  return (
    <div id="parent">
      {data.map(item => {
        const { ref, inView } = useInView({
          triggerOnce: false, // Change this to true if you want the event to trigger only once
        });

        return (
          <div id={item.id} ref={ref}>
            {inView ? 'In viewport' : 'Not in viewport'}
            {item.title}
          </div>
        );
      })}
    </div>
  );
};

export default MyComponent;
```

In this example, `useInView` returns a `ref` that you can attach to the div. It also returns `inView`, a boolean that tells you whether the div is in the viewport or not.

Please note that you need to wrap your component with `Observer` from `react-intersection-observer` if you want to use `useInView` hook. 

Also, remember to polyfill `IntersectionObserver` if your target browsers do not support it. You can use `intersection-observer` npm package for this. 

```bash
npm install intersection-observer
```

Then, import it in your main application file:

```javascript
import 'intersection-observer';
```

This will ensure that `IntersectionObserver` is available in all browsers.