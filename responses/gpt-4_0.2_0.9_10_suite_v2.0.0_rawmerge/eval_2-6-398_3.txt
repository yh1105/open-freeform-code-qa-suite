The problem is that you're trying to inject `ILogger` directly, but the logging system in .NET Core works with `ILogger<TCategoryName>`. 

You should change your `MyClass` constructor to take `ILogger<MyClass>` instead of `ILogger`. Here's how to do it:

```c#
private readonly ILogger _logger;

public MyClass(ILogger<MyClass> logger)
{
    _logger = logger;
}
```

Then, in your `Main` method, you should add your `MyClass` to the service collection:

```c#
var services = new ServiceCollection()
    .AddLogging(logging => logging.AddConsole())
    .AddSingleton<MyClass>()
    .BuildServiceProvider();
```

Now you can get an instance of `MyClass` from the service provider and it will have a logger:

```c#
var myClass = services.GetService<MyClass>();
myClass.MyFunc();
```