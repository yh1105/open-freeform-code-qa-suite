In Rust, you can't directly set a field of a struct to an "empty" value if the field's type doesn't have a concept of an "empty" value. In your case, `TcpStream` doesn't have a default value that you can use.

You can use `Option<TcpStream>` instead of `TcpStream` for the `conn` field. This allows you to set `conn` to `None` initially, and then set it to `Some(stream)` when you connect.

Here's how you can do it:

```rust
use std::net::TcpStream;

pub struct FistClient {
    addr: String,
    conn: Option<TcpStream>,
}

impl FistClient {
    pub fn new(ip: &str, port: &str) -> Self {
        FistClient {
            addr: String::from(ip) + ":" + &String::from(port),
            conn: None,
        }
    }

    pub fn connect(&mut self) {
        let res = TcpStream::connect(&self.addr);
        match res {
            Ok(c) => self.conn = Some(c),
            Err(_) => panic!(),
        }
    }
}
```

Now, `conn` is initially `None` and is set to `Some(stream)` when `connect` is called. You'll need to update the rest of your code to handle the fact that `conn` is now an `Option<TcpStream>`, not a `TcpStream`.