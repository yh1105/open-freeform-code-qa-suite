Your current implementations are already quite good. The second way using `HashSet` is indeed simpler and more efficient. It avoids the need to search the array for each unique name, which would make the first way less efficient for large arrays.

However, if you are looking for a more idiomatic way to do this in Rust, you might want to consider using a `HashMap` instead. This way, you can store each `Person` in the map with their name as the key. This will automatically remove duplicates because keys in a map are unique. Here's how you can do it:

```rust
use std::collections::HashMap;

fn main() {
    let arr = [
        Person { name: "aaa".to_string(), age: 10 },
        Person { name: "bbb".to_string(), age: 20 },
        Person { name: "bbb".to_string(), age: 20 },
        Person { name: "ccc".to_string(), age: 30 },
    ];

    let mut map = HashMap::new();
    for person in arr.iter() {
        map.entry(&person.name).or_insert(person);
    }

    let arr2: Vec<_> = map.values().collect();
    dbg!(arr2);
}
```

In this code, `HashMap::entry` is used to get an entry for the given key, and `or_insert` is used to insert the `person` if the key was not already present in the map. This way, the first occurrence of each person is kept and any subsequent duplicates are ignored.

Please note that this will only work if the `Person` struct implements the `Eq` and `Hash` traits, which are required for the keys in a `HashMap`. If `Person` does not implement these traits, you will need to use a different method to remove duplicates.