Your second way of removing duplicates using a `HashSet` is already quite efficient and simple. It has a time complexity of O(n) which is the best you can get for this kind of problem. However, it relies on the fact that the `Person` struct does not implement `Hash` and `Eq` traits, and it only compares the `name` field of the `Person` struct.

If you want to compare the entire `Person` struct, you need to derive `Hash`, `Eq`, and `PartialEq` for your `Person` struct. Here is how you can do it:

```rust
use std::collections::HashSet;

#[derive(Debug, Hash, PartialEq, Eq)]
struct Person {
    name: String,
    age: u32,
}

fn main() {
    let arr = [
        Person { name: "aaa".to_string(), age: 10 },
        Person { name: "bbb".to_string(), age: 20 },
        Person { name: "bbb".to_string(), age: 20 },
        Person { name: "ccc".to_string(), age: 30 },
    ];

    let arr2: HashSet<_> = arr.iter().collect();
    dbg!(arr2);
}
```

In this code, `HashSet` automatically removes duplicates because it only allows unique elements. Note that this will not preserve the original order of elements. If you need to preserve the order, you can use a `BTreeSet` instead, but you'll need to derive `Ord` and `PartialOrd` for your `Person` struct.