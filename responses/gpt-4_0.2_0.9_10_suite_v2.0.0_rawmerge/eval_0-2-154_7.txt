Sure, here is a generator function that should do what you want:

```javascript
function* iterLeafNodes(strhtml, format=[]) {
  const parser = new DOMParser();
  const doc = parser.parseFromString(strhtml, "text/html");
  const body = doc.body;

  function* walk(node, format) {
    if (node.nodeType === Node.TEXT_NODE) {
      if (node.textContent.trim() !== '') {
        yield {
          text: node.textContent,
          format: format
        };
      }
    } else if (node.nodeType === Node.ELEMENT_NODE) {
      const newFormat = format.slice();
      newFormat.push(node.tagName.toLowerCase());
      for (const child of node.childNodes) {
        yield* walk(child, newFormat);
      }
    }
  }

  for (const child of body.childNodes) {
    yield* walk(child, format);
  }
}
```

This function uses the `DOMParser` to parse the HTML string into a DOM tree. It then walks the tree using a recursive generator function. When it encounters a text node, it yields an object with the text and the current format. When it encounters an element node, it adds the tag name to the format and recursively walks the child nodes.