Yes, there are more idiomatic ways to express the same logic in Rust. Here are a few alternatives:

1. Using `if let` with a condition:

```rust
fn main() {
    let mut foo: Option<u8> = None;
    if let Some(foo_val) = foo {
        if foo_val < 5 {
            // Do nothing
        } else {
            foo.replace(5);
        }
    } else {
        foo.replace(5);
    }
}
```

2. Using `map_or`:

```rust
fn main() {
    let mut foo: Option<u8> = None;
    foo = foo.map_or(Some(5), |foo_val| if foo_val < 5 { Some(foo_val) } else { Some(5) });
}
```

3. Using `match` with a tuple:

```rust
fn main() {
    let mut foo: Option<u8> = None;
    match (foo, foo.map(|foo_val| foo_val < 5)) {
        (Some(_), Some(true)) => {}
        _ => { foo.replace(5); }
    }
}
```

4. Using `if let` with `else`:

```rust
fn main() {
    let mut foo: Option<u8> = None;
    if let Some(foo_val) = foo {
        if foo_val >= 5 {
            foo.replace(5);
        }
    } else {
        foo.replace(5);
    }
}
```

5. Using `map_or_else`:

```rust
fn main() {
    let mut foo: Option<u8> = None;
    foo = foo.map_or_else(|| Some(5), |foo_val| if foo_val < 5 { Some(foo_val) } else { Some(5) });
}
```

All these alternatives are more idiomatic and express the same logic as the original code.