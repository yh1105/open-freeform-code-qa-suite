Sure, here is a function that does that:

```javascript
function keys_and_prices(raw_obj) {
    let keys = Object.keys(raw_obj);
    let prices = keys.map(key => raw_obj[key].price);
    return [keys, prices];
}
```

This function first uses `Object.keys()` to get an array of keys from the input object. Then it uses `Array.prototype.map()` to create a new array of prices, where each price is extracted from the corresponding object in the input object.

Here is how you can use it:

```javascript
var itemsToBuy = { milk: { quantity : 5, price: 20 }, bread: { quantity : 2, price: 15 }, potato: { quantity : 3, price: 10 } }
let ret = keys_and_prices(itemsToBuy)
console.log(ret[0]) // ["milk", "bread", "potato"]
console.log(ret[1]) // [20, 15, 10]
```

Please note that the `==` operator in JavaScript does not compare the contents of arrays. Instead, it checks if two arrays are the same object. Therefore, in your example, `assert(ret[0] == ["milk", "bread", "potato"])` and `assert(ret[1] == [20, 15, 10])` would not work as expected. You might want to use a function that compares arrays by their contents, or use a library like Lodash which provides such a function.