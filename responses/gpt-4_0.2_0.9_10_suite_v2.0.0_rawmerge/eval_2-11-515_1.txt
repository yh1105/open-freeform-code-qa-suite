```c++
#include <vector>
#include <utility>
#include <algorithm>
#include <iterator>

std::vector<std::pair<int, int>> origin_to_goal(std::vector<int> origin) {
    std::vector<std::pair<int, int>> goal(origin.size() / 2);
    std::transform(origin.begin(), origin.end(), goal.begin(), 
        [it = origin.begin()] (int&) mutable {
            return std::make_pair(*it++, *it++);
        }
    );
    return goal;
}
```
This function uses the `std::transform` function from the C++ Standard Library to create a new vector of pairs from the original vector. The lambda function passed to `std::transform` creates a pair from two consecutive elements in the original vector. The `mutable` keyword is used to allow the lambda function to modify the `it` variable.