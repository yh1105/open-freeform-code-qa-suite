In Rust, you can't directly set a field of a struct to an "empty" value if the field's type doesn't have a concept of an "empty" value. In your case, `TcpStream` doesn't have a default or "empty" value.

One common way to handle this situation is to use `Option<TcpStream>`. This way, you can set `conn` to `None` in `new` method and `Some(TcpStream)` in `connect` method.

Here is how you can do it:

```rust
use std::net::TcpStream;

pub struct FistClient {
    addr: String,
    conn: Option<TcpStream>,
}

impl FistClient {
    pub fn new(ip: &str, port: &str) -> Self {
        FistClient {
            addr: String::from(ip) + ":" + &String::from(port),
            conn: None,
        }
    }

    pub fn connect(&mut self) {
        let res = TcpStream::connect(&self.addr);
        match res {
            Ok(c) => self.conn = Some(c),
            Err(_) => panic!(),
        }
    }
}
```

In this code, `conn` is an `Option<TcpStream>`. In the `new` method, `conn` is set to `None`, which represents the absence of a value. In the `connect` method, `conn` is set to `Some(c)`, which represents the presence of a value.