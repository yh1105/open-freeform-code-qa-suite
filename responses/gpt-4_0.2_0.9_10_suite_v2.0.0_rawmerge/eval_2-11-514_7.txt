Here is a possible implementation of the function `fun` using variadic templates and `std::array`. This function will take a fixed number of arguments of the same type and store them in a `std::array`:

```c++
#include <array>
#include <utility>

struct Foo
{
    int a, b, c;
};

template <uint32_t argsCount, typename T, typename... Args>
void fun(Args... args) // max number of args == argsCount
{
    static_assert(sizeof...(Args) <= argsCount, "Too many arguments provided");
    std::array<T, argsCount> arr{ args... };
    // Now you can use arr for further processing
}

int main()
{
    fun<3, Foo>( { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } );
    return 0;
}
```

In this code, `fun` is a function template that takes a variable number of arguments (`args...`) of the same type (`T`). The `std::array` is created with the size `argsCount` and is initialized with the arguments passed to the function.

The `static_assert` is used to check at compile time that the number of arguments passed to the function does not exceed `argsCount`. If this condition is not met, a compile-time error will be generated.

Please note that this code does not perform any heap memory allocations and does not use `va_args`, in accordance with your constraints.