The two ways you've implemented are already quite efficient. The first one uses the `Itertools` crate's `unique` method, which is quite handy. The second one uses a `HashSet` to filter out duplicates, which is a common and efficient way to remove duplicates from a collection in many programming languages.

However, if you're looking for a simpler way, you might be out of luck. Rust, being a systems programming language, doesn't have a built-in method for removing duplicates from an array or vector. This is because such a method would require either sorting the array (which isn't always possible or desirable) or using additional memory (which might not be available in a systems programming context).

That being said, if you're willing to sort your array, you could use the `dedup` method provided by Rust's `Vec` type. Here's how you could do it:

```rust
fn main() {
    let mut arr = vec![
        Person { name: "aaa".to_string(), age: 10 },
        Person { name: "bbb".to_string(), age: 20 },
        Person { name: "bbb".to_string(), age: 20 },
        Person { name: "ccc".to_string(), age: 30 },
    ];

    arr.sort_by(|a, b| a.name.cmp(&b.name));
    arr.dedup_by(|a, b| a.name == b.name);

    dbg!(arr);
}
```

Note that this will modify your original array and sort it by the `name` field. If you don't want to modify your original array or if you don't want to sort it, you'll have to stick with one of the methods you've already implemented.