You can use the `react-intersection-observer` npm package to detect if an element is in the viewport. This package uses the Intersection Observer API to tell you when an element enters or leaves the viewport.

First, install the package using npm:

```bash
npm install react-intersection-observer
```

Then, you can use the `useInView` hook from the package to track the visibility of each div. Here's how you can modify your code:

```jsx
import React from 'react';
import { useInView } from 'react-intersection-observer';

const MyComponent = ({ data }) => {
  return (
    <div id="parent">
      {data.map(item => {
        const { ref, inView } = useInView({
          triggerOnce: false, // Change this to true if you want the event to trigger only once
        });

        return (
          <div id={item.id} ref={ref}>
            {inView ? 'In viewport' : 'Not in viewport'}
            {item.title}
          </div>
        );
      })}
    </div>
  );
};

export default MyComponent;
```

In this code, `useInView` returns a `ref` that you attach to the div. It also returns `inView`, a boolean that tells you whether the div is in the viewport. The `triggerOnce` option is set to `false`, so `inView` will update every time the div enters or leaves the viewport.

Please note that the Intersection Observer API is not supported in all browsers, so you might want to include a polyfill for full compatibility.