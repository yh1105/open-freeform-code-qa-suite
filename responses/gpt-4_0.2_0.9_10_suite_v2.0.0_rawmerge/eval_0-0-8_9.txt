Sure, here is a recursive function that will traverse the nested object tree and return the object with the matching `id`.

```javascript
function findObject(id, node) {
    if (node.id === id) {
        return node;
    }
    for (let i = 0; i < node.child.length; i++) {
        let found = findObject(id, node.child[i]);
        if (found) {
            return found;
        }
    }
    return null;
}
```

This function works by checking if the current node's `id` matches the target `id`. If it does, it returns the current node. If it doesn't, it recursively calls `findObject` on each of the current node's children. If a match is found in a subtree, it is returned up the call stack. If no match is found, the function returns `null`.