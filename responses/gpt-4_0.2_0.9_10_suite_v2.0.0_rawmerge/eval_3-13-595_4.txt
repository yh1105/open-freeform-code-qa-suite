The error you're encountering is likely due to the changes in Android 10 (API level 29) and above regarding scoped storage. Android 10 and above enforce scoped storage by default, which restricts the app's access to external storage directories. 

In Android 11, apps cannot access other apps' files in external storage. Apps can still access their own files in external storage. 

To fix this issue, you can use the `getExternalFilesDir()` method instead of `getExternalStorageDirectory()`. This method returns the absolute path to the directory on the primary shared/external storage device where the application can place persistent files it owns. These files are internal to the application, and not typically visible to the user as media.

Here is the updated code:

```java
private fun getTempFolder(): File {
    val directoryFolder = File(context.getExternalFilesDir(null), "sample-take-image")
    directoryFolder.mkdirs()
    return directoryFolder
}
```

Remember to replace `context` with your own context.

Also, make sure you have the necessary permissions in your manifest file:

```xml
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
```

And you have requested these permissions at runtime.

If you still want to use the whole external storage, you need to opt-out of scoped storage by adding `requestLegacyExternalStorage` to your `AndroidManifest.xml`:

```xml
<application
    android:requestLegacyExternalStorage="true"
    ...
</application>
```

Please note that this is a temporary solution and will not work starting with Android 11. It's recommended to adapt your code to work with scoped storage.