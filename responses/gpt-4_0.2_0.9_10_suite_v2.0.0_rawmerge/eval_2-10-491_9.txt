Yes, there are more idiomatic ways to express the same logic in Rust. Here are a few alternatives:

1. **Using `if let` and `else`**:

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        if let Some(foo_val) = foo {
            if foo_val < 5 {
                foo.replace(5);
            }
        } else {
            foo.replace(5);
        }
    }
    ```
    This is more idiomatic because it uses `if let` to destructure `foo` and then checks the condition. If `foo` is `None` or the condition is met, it replaces `foo`.

2. **Using `map_or`**:

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        foo = foo.map_or(Some(5), |foo_val| if foo_val < 5 { Some(5) } else { Some(foo_val) });
    }
    ```
    This is more idiomatic because it uses `map_or` to apply a function to the `Option` if it is `Some`, or returns a default value if it is `None`.

3. **Using `match` in a more idiomatic way**:

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        foo = match foo {
            Some(foo_val) if foo_val >= 5 => Some(foo_val),
            _ => Some(5),
        };
    }
    ```
    This is more idiomatic because it uses `match` to destructure `foo` and then checks the condition. If `foo` is `None` or the condition is met, it replaces `foo`.

4. **Using `unwrap_or`**:

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        let foo_val = foo.unwrap_or(5);
        if foo_val < 5 {
            foo.replace(5);
        }
    }
    ```
    This is more idiomatic because it uses `unwrap_or` to get the value inside `foo` if it is `Some`, or a default value if it is `None`. Then it checks the condition and replaces `foo` if necessary.

5. **Using `or_else`**:

    ```rust
    fn main() {
        let mut foo: