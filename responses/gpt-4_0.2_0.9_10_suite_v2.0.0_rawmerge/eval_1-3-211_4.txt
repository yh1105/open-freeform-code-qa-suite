Sure, you can achieve this by using the `groupby`, `apply`, and `cumsum` functions provided by pandas. Here is the function `aggregation`:

```python
def aggregation(df):
    # Convert 'value' column to numeric
    df['value'] = pd.to_numeric(df['value'])

    # Create a new column 'balance' which is the cumulative sum of 'value' where 'type' is 'deposit'
    df['balance'] = df[df['type'] == 'deposit'].groupby('exchange')['value'].cumsum()

    # Forward fill the 'balance' column
    df['balance'] = df.groupby('exchange')['balance'].ffill()

    # Fill NaN values with 0
    df['balance'] = df['balance'].fillna(0)

    return df
```

This function first converts the 'value' column to numeric type. Then it creates a new column 'balance' which is the cumulative sum of 'value' where 'type' is 'deposit', grouped by 'exchange'. The `cumsum` function returns the cumulative sum of a DataFrame or Series. After that, it forward fills the 'balance' column within each group of 'exchange'. The `ffill` function propagates the last valid observation forward to the next valid. Finally, it fills NaN values with 0 and returns the modified DataFrame.