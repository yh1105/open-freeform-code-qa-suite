In order to create an index in Mongoose schema using Nest.js, you need to use the `@Prop()` decorator with the `index` option set to `true` as you have done. However, the index creation in MongoDB is an asynchronous operation and it might not be created immediately.

To ensure that the index is created, you need to call the `ensureIndexes()` function on the model. You can do this in the `onModuleInit()` lifecycle hook in your service or module.

Here is an example:

```javascript
import { Injectable, OnModuleInit } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';

@Injectable()
export class MyService implements OnModuleInit {
  constructor(
    @InjectModel(Schema.name) private readonly myModel: Model<Schema>,
  ) {}

  async onModuleInit() {
    await this.myModel.init();
    await this.myModel.ensureIndexes(); // this will ensure the index is created
  }
}
```

In this example, `MyService` is a service that injects the Mongoose model for your schema. The `onModuleInit()` function is a lifecycle hook that is called when the Nest.js module is initialized. In this function, we call `ensureIndexes()` on the model to ensure that the index is created.

Please replace `Schema` and `MyService` with your actual schema and service names.