Sure, here is a function that does exactly what you're asking for:

```javascript
function keys_and_prices(raw_obj) {
    let keys = Object.keys(raw_obj);
    let prices = keys.map(key => raw_obj[key].price);
    return [keys, prices];
}
```

This function first gets all the keys from the input object using `Object.keys()`. Then it maps over these keys, using each key to access the corresponding `price` field in the input object. The result is an array of prices. Finally, it returns an array containing the keys and prices arrays.

Here is how you can use this function with your example:

```javascript
var itemsToBuy = { milk: { quantity : 5, price: 20 }, bread: { quantity : 2, price: 15 }, potato: { quantity : 3, price: 10 } }
let ret = keys_and_prices(itemsToBuy)
console.log(ret[0]) // ["milk", "bread", "potato"]
console.log(ret[1]) // [20, 15, 10]
```

Please note that the `==` operator in JavaScript does not compare arrays by their content, but by their reference. Therefore, `assert(ret[0] == ["milk", "bread", "potato"])` and `assert(ret[1] == [20, 15, 10])` will not work as expected. You should use a function that compares arrays by their content, or convert the arrays to strings before comparing them.