Yes, Go modules support this kind of workflow. Here's how you can do it:

1. Copy your `go.mod` and `go.sum` files into the Docker image.

```Dockerfile
FROM golang:1.11

WORKDIR /app

# Copy go mod and sum files 
COPY go.mod go.sum ./
```

2. Download the dependencies. This will be cached if your `go.mod` and `go.sum` files do not change.

```Dockerfile
# Download all dependencies. Dependencies will be cached if the go.mod and go.sum files are not changed 
RUN go mod download
```

3. Copy the rest of your code and build the application.

```Dockerfile
# Copy the source from the current directory to the Working Directory inside the docker image 
COPY . .

# Build the Go app
RUN go build -o main .
```

4. Your final Dockerfile will look like this:

```Dockerfile
FROM golang:1.11

WORKDIR /app

# Copy go mod and sum files 
COPY go.mod go.sum ./

# Download all dependencies. Dependencies will be cached if the go.mod and go.sum files are not changed 
RUN go mod download

# Copy the source from the current directory to the Working Directory inside the docker image 
COPY . .

# Build the Go app
RUN go build -o main .

CMD ["./main"]
```

This way, Docker will cache the image layer with the downloaded dependencies as long as `go.mod` and `go.sum` do not change. This can significantly speed up your Docker builds.