You can use the `react-intersection-observer` npm package to achieve this. This package uses the Intersection Observer API to tell you when an element enters or leaves the viewport.

First, install the package:

```bash
npm install react-intersection-observer
```

Then, you can use the `InView` component from the package to wrap each of your divs. The `InView` component will provide a callback function that will be called whenever the div enters or leaves the viewport.

Here is an example of how you can use it:

```javascript
import React from 'react';
import { InView } from 'react-intersection-observer';

function MyComponent({ data }) {
  return (
    <div id="parent">
      {data.map(item => (
        <InView as="div" id={item.id} onChange={(inView, entry) => {
          if (inView) {
            console.log(`Div with id ${item.id} is in view!`);
          } else {
            console.log(`Div with id ${item.id} is not in view!`);
          }
        }}>
          {item.title}
        </InView>
      ))}
    </div>
  );
}
```

In this example, the `onChange` prop is a function that will be called whenever the div enters or leaves the viewport. The `inView` parameter will be `true` if the div is in the viewport, and `false` otherwise. The `entry` parameter is the Intersection Observer Entry object for the div, which contains more detailed information about its visibility.

Remember to replace `data.title` with `{item.title}` to correctly display the title from your data.