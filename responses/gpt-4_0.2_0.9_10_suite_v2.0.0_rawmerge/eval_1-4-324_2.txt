Here is a function `mySplit` that uses the `strsplit` function to split the strings in `col1` by comma and colon, and then reshapes the data into a data frame with separate columns for `name`, `Age`, and `City`.

```r
mySplit <- function(df) {
  # Split the strings in col1 by comma and colon
  split_strings <- strsplit(as.character(df$col1), ",|:")
  
  # Initialize empty vectors for name, Age, and City
  name <- Age <- City <- character(length(split_strings))
  
  # Loop over the split strings
  for (i in seq_along(split_strings)) {
    # Extract the name, Age, and City from the split strings
    name[i] <- split_strings[[i]][2]
    Age[i] <- split_strings[[i]][4]
    City[i] <- split_strings[[i]][6]
  }
  
  # Create a data frame with the extracted name, Age, and City
  df_new <- data.frame(name, Age, City, stringsAsFactors = FALSE)
  
  return(df_new)
}
```

You can use this function on your data frame `df` like this:

```r
df <- data.frame(col1 = c("name:Michael,Age:31,City:NYC", "name:Tom,Age:25,City:NA"), stringsAsFactors = FALSE)
df_new <- mySplit(df)
print(df_new)
```

This will print:

```r
     name Age City
1 Michael  31  NYC
2     Tom  25   NA
```

This function assumes that the strings in `col1` always have the format "name:...,Age:...,City:...". If the format can vary, you may need to modify the function to handle the variations.