Here is the function `createPriorityQueue` that creates a priority queue of integer pairs. The smallest key of pairs is considered as priority.

```java
public static PriorityQueue<Pair<Integer, Integer>> createPriorityQueue() {
    PriorityQueue<Pair<Integer, Integer>> pq = new PriorityQueue<>(new Comparator<Pair<Integer, Integer>>() {
        @Override
        public int compare(Pair<Integer, Integer> o1, Pair<Integer, Integer> o2) {
            return o1.getKey().compareTo(o2.getKey());
        }
    });
    return pq;
}
```

This function creates a `PriorityQueue` of `Pair<Integer, Integer>` objects. The `PriorityQueue` is initialized with a `Comparator` that compares the keys of the pairs. The `compare` method of the `Comparator` returns the result of comparing the keys of the two pairs using their `compareTo` method. This ensures that the pairs are ordered in the queue by their keys in ascending order.