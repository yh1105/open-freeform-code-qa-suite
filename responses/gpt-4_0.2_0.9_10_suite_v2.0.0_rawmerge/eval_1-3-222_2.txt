Here is a Python function that uses dynamic programming to solve the problem:

```python
def func(n, k):
    if n == 0 or k == 0:
        return 0
    if n == 1:
        return k

    # dp[i][0] stores number of ways to form a string of length i with no consecutive same characters
    # dp[i][1] stores number of ways to form a string of length i with at most two consecutive same characters
    dp = [[0, 0] for _ in range(n+1)]
    
    # For a string of length 1, there are k ways with no consecutive same characters
    # and k ways with at most two consecutive same characters
    dp[1][0] = dp[1][1] = k

    for i in range(2, n+1):
        # For a string of length i, we can form a string with no consecutive same characters
        # by appending a different character to all strings of length i-1 with at most two consecutive same characters
        dp[i][0] = dp[i-1][1] * (k-1)

        # For a string of length i, we can form a string with at most two consecutive same characters
        # by appending a different character to all strings of length i-1 with no consecutive same characters
        # or by appending the same character to all strings of length i-1 with no consecutive same characters
        dp[i][1] = dp[i-1][0] + dp[i-1][1] * (k-1)

    # The total number of ways to form a string of length n with at most two consecutive same characters
    # is the sum of the number of ways to form a string of length n with no consecutive same characters
    # and the number of ways to form a string of length n with at most two consecutive same characters
    return dp[n][0] + dp[n][1]
```

This function works by first initializing a two-dimensional list `dp` where `dp[i][0]` stores the number of ways to form a string of length `i` with no consecutive same characters and `dp[i][1]` stores the number of ways to form a string of length `i` with at most two consecutive same characters. It then iteratively computes the values of `dp[i