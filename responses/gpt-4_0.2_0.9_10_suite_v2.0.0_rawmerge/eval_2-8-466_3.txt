You can use the `gin.WrapH` function to wrap the Prometheus HTTP handler and use it in your Gin application. Here's how you can modify your code:

```go
package main

import (
    "log"
    "net/http"

    "github.com/gin-gonic/gin"
    "github.com/prometheus/client_golang/prometheus"
    "github.com/prometheus/client_golang/prometheus/promhttp"
)

var cpuTemp = prometheus.NewGauge(prometheus.GaugeOpts{
    Name: "cpu_temperature_celsius",
    Help: "Current temperature of the CPU.",
})

func init() {
    // Metrics have to be registered to be exposed:
    prometheus.MustRegister(cpuTemp)
}

func main() {
    cpuTemp.Set(65.3)

    // Create a new gin router
    r := gin.Default()

    // The Handler function provides a default handler to expose metrics
    // via an HTTP server. "/metrics" is the usual endpoint for that.
    // Use gin.WrapH to wrap the promhttp Handler function
    r.GET("/metrics", gin.WrapH(promhttp.Handler()))

    // Start the gin server
    log.Fatal(r.Run(":8080"))
}
```

In this code, we're creating a new Gin router with `gin.Default()`, then using `r.GET("/metrics", gin.WrapH(promhttp.Handler()))` to add a route that serves Prometheus metrics. The `gin.WrapH` function is used to convert the `http.Handler` returned by `promhttp.Handler()` into a Gin handler. Finally, we start the server with `r.Run(":8080")`.