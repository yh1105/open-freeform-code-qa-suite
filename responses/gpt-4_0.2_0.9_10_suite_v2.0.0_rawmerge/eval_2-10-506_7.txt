You can use the `iter()` method in combination with `min()` to get the minimum value of a vector in Rust. Here's how you can do it:

```rust
let v = vec![5, 6, 8, 4, 2, 7];
let min = v.iter().min();

match min {
    Some(min) => println!("The minimum value is {}", min),
    None => println!("The vector is empty"),
}
```

In this code, `v.iter().min()` returns an `Option<&i32>`. If the vector is empty, `min()` will return `None`. If the vector is not empty, `min()` will return `Some(&i32)`, where `&i32` is a reference to the smallest `i32` in the vector.

The `match` statement is used to handle both possibilities. If `min()` returns `Some(min)`, the code prints out the minimum value. If `min()` returns `None`, the code prints out a message indicating that the vector is empty.