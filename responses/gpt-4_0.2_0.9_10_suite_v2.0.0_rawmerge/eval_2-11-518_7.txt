The Rule of Five is not necessarily outdated, but it's true that with modern C++ features, such as smart pointers, you often don't need to write these special member functions yourself.

However, there are still cases where you might need to define them. Here are a few examples:

1. **Performance**: While smart pointers are great, they do introduce a level of indirection and a small amount of overhead. In performance-critical code, you might choose to manage memory yourself to avoid this.

2. **Resource types other than memory**: The Rule of Five applies to any kind of resource, not just memory. For example, if your class holds a handle to an OS resource (like a file or a network socket), you'll need to define these functions to correctly copy and move your objects.

3. **Non-owning pointers**: If your class contains raw pointers but does not own the objects they point to, you may need to define these functions to ensure the pointers are copied or moved correctly.

4. **Legacy code**: If you're working with older code that doesn't use smart pointers, you'll still need to follow the Rule of Five.

5. **Custom behavior**: Sometimes you need your class to do something special when it's copied or moved. In these cases, you'll need to define these functions yourself.

So while it's true that you need these functions less often in modern C++, there are still plenty of cases where they're necessary. The Rule of Five is a guideline to ensure that if you do need one of these functions, you don't forget to define the others.