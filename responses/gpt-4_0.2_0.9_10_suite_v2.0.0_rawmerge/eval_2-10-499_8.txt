In Rust, you cannot directly assign an empty or null value to a field of a struct. However, you can use the `Option` enum to represent a value that might be absent. 

In your case, you can change the type of `conn` to `Option<TcpStream>`. This way, you can set `conn` to `None` in the `new` method and then set it to `Some(TcpStream)` in the `connect` method.

Here is how you can do it:

```rust
use std::net::TcpStream;

pub struct FistClient {
    addr: String,
    conn: Option<TcpStream>,
}

impl FistClient {
    pub fn new(ip: &str, port: &str) -> Self {
        FistClient {
            addr: String::from(ip) + ":" + &String::from(port),
            conn: None,
        }
    }

    pub fn connect(&mut self) {
        let res = TcpStream::connect(&self.addr);
        match res {
            Ok(c) => self.conn = Some(c),
            Err(_) => panic!(),
        }
    }
}
```

In this way, you can handle the absence of a value in a type-safe manner. When you want to use `conn`, you will need to handle the case when it is `None`, which will help you avoid null pointer exceptions.