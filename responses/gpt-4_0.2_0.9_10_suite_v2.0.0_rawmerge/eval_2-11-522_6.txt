No, C++ standard library does not provide a direct way to query a thread's properties or enforce on which cores they will run.

The C++ standard library's threading model is designed to be platform-independent, and as such, it does not provide direct access to many low-level details of the system's threading implementation. This includes the ability to query a thread's properties or to specify on which cores a thread should run.

However, you can use platform-specific code or third-party libraries to achieve this. For example, on a POSIX system, you could use the `pthread_setaffinity_np` function to set a thread's CPU affinity, effectively restricting it to run on certain cores. Similarly, on Windows, you can use the `SetThreadAffinityMask` function.

Keep in mind that these are advanced techniques and should be used with caution. Incorrect use of thread affinity can lead to performance problems, such as reducing the system's ability to schedule threads efficiently. It's generally best to let the operating system handle thread scheduling unless you have a specific reason to do otherwise.