The issue is that you're trying to inject `ILogger` directly, but the logging services are set up to use a generic `ILogger<T>`, where `T` is the class into which the logger is being injected. 

You should change your `MyClass` constructor to take `ILogger<MyClass>` instead of `ILogger`. Here's how you should modify your class:

```c#
private readonly ILogger<MyClass> _logger;

public MyClass(ILogger<MyClass> logger)
{
    _logger = logger;
}

public void MyFunc()
{
    _logger.Log(LogLevel.Error, "MyMessage");
}
```

Then, when you're setting up your services, you need to add `MyClass` to the service collection:

```c#
var services = new ServiceCollection()
    .AddLogging(logging => logging.AddConsole())
    .AddSingleton<MyClass>()
    .BuildServiceProvider();
```

Now, when you get an instance of `MyClass` from the service provider, it will have a properly injected `ILogger<MyClass>`.