You can use the `react-intersection-observer` library to achieve this. This library uses the Intersection Observer API to tell you when an element is in view.

First, install the library using npm:

```bash
npm install react-intersection-observer
```

Then, you can use the `InView` component from `react-intersection-observer` to wrap each of your divs. The `InView` component will provide a `ref` and an `inView` prop to its child. The `inView` prop will be `true` when the element is in view and `false` otherwise.

Here's an example of how you might use it:

```javascript
import React from 'react';
import { InView } from 'react-intersection-observer';

function MyComponent({ data }) {
  return (
    <div id="parent">
      {data.map(item => (
        <InView key={item.id}>
          {({ inView, ref }) => (
            <div id={item.id} ref={ref}>
              {inView ? 'In viewport' : 'Not in viewport'}
            </div>
          )}
        </InView>
      ))}
    </div>
  );
}

export default MyComponent;
```

In this example, each div will display whether it's in the viewport or not. You can replace the ternary operator with your own logic to do something when the div is in view.

Please note that the Intersection Observer API is not supported in all browsers. If you need to support a browser that does not have this API, you will need to use a polyfill. The `react-intersection-observer` library recommends the `intersection-observer` polyfill, which you can install with npm:

```bash
npm install intersection-observer
```

And then import at the top of your main JavaScript file:

```javascript
import 'intersection-observer';
```