The issue you're facing is related to the changes in file system access permissions introduced in Android 10 (API level 29) and later versions. Android 10 and later versions enforce scoped storage, which means apps have limited access to external storage directories. 

In your case, you're trying to create a file in the external storage directory, which is not allowed in Android 10 and later versions. 

To solve this issue, you can:

1. Use the app-specific directory to store your files. You can get the app-specific directory using `context.getExternalFilesDir(null)`. Here's how you can modify your `getTempFolder()` function:

```java
private fun getTempFolder(): File {
    val directoryFolder = File(context.getExternalFilesDir(null), "sample-take-image")
    directoryFolder.mkdirs()
    return directoryFolder
}
```

2. If you need to access the files in the external storage directory, you need to use the Storage Access Framework (SAF). You can use `Intent.ACTION_OPEN_DOCUMENT` or `Intent.ACTION_CREATE_DOCUMENT` to open or create files in the external storage directory.

3. If you still want to use the old way of accessing files and you're targeting Android 10 (API level 29), you can opt-out of scoped storage by adding `android:requestLegacyExternalStorage="true"` in your `AndroidManifest.xml` file inside the `<application>` tag. But keep in mind that this is a temporary solution and won't work on Android 11 and later versions.

```xml
<application
    android:requestLegacyExternalStorage="true"
    ... >
    ...
</application>
```

Remember to handle runtime permissions for `Manifest.permission.WRITE_EXTERNAL_STORAGE` and `Manifest.permission.READ_EXTERNAL_STORAGE` if you're targeting Android 6.0 (API level 23) and higher.