You can use the `pkg_resources` module to get the installed version of a package, and the `pip` module to get the latest version available on PyPI. Here is a function that does this:

```python
import pkg_resources
import xmlrpc.client

def checkVersion(pkgName):
    pypi = xmlrpc.client.ServerProxy('https://pypi.python.org/pypi')
    available = pypi.package_releases(pkgName)
    if not available:  # package not found
        return False

    installed_version = pkg_resources.get_distribution(pkgName).version
    return installed_version == available[0]
```

This function first connects to PyPI and gets a list of available versions for the package. If the package is not found on PyPI, the function returns `False`.

Then it gets the installed version of the package using `pkg_resources.get_distribution(pkgName).version`.

Finally, it compares the installed version with the latest version available on PyPI (which is the first element in the `available` list, since PyPI returns versions sorted from newest to oldest) and returns `True` if they are equal, and `False` otherwise.

Please note that this function will raise a `DistributionNotFound` exception if the package is not installed. If you want to handle this case, you can modify the function to catch this exception and return `False`.