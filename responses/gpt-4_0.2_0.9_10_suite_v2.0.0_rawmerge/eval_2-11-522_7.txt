No, C++ Standard Library does not provide a direct way to query a thread's properties or enforce on which cores they will run.

The C++ Standard Library's threading facilities are designed to be portable and abstracted from the specifics of any particular threading implementation. As such, they do not provide direct control over the specific cores that threads run on, or the ability to query the properties of individual threads beyond what is provided by the `std::thread` interface.

However, you can use platform-specific APIs to control thread affinity (i.e., which cores a thread can run on). For example, on Windows, you can use the `SetThreadAffinityMask` function, and on Linux, you can use the `pthread_setaffinity_np` function. But keep in mind that these are not portable solutions and can lead to less efficient code if misused, as the system's scheduler is generally best equipped to decide where to run threads.

For distinguishing between high- and low-performance cores/threads, this is typically a job for the operating system's scheduler, not for individual applications. The OS is aware of the system's hardware configuration and can make informed decisions about where to run threads. However, if you have specific knowledge about the hardware you're running on, you might be able to use that to influence the scheduler's decisions using the aforementioned platform-specific APIs. But again, this is not something that the C++ Standard Library provides direct support for.