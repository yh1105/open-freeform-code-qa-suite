You can use the `sort_by` method of the `Vec` struct to sort your vector. This method sorts the vector in-place using the comparison function you provide. 

Here is an example of how you can sort your vector by `row` and then by `column`:

```rust
my_vector.sort_by(|a, b| {
    a.row.cmp(&b.row)
        .then_with(|| a.column.cmp(&b.column))
});
```

In this example, `cmp` is a method that compares two values and returns an `Ordering` that indicates their relative order. `then_with` is a method that chains two comparisons together. If the first comparison determines that the two values are equal, then the second comparison is used.

This will sort your vector in ascending order by `row` and then by `column`. If you want to sort in descending order, you can use `cmp` method in combination with `reverse` method:

```rust
my_vector.sort_by(|a, b| {
    b.row.cmp(&a.row)
        .then_with(|| b.column.cmp(&a.column))
});
```

This will sort your vector in descending order by `row` and then by `column`.