No, it's not a bad practice. 

In fact, it's quite common to have different pipeline behaviors for different types of requests/responses in a system. The main idea behind the pipeline behavior pattern is to allow you to encapsulate cross-cutting concerns in a way that is decoupled from your main business logic. 

If `RequestOne` and `RequestTwo` have different cross-cutting concerns, then it makes sense to have different pipeline behaviors for them. For example, you might want to have a different kind of logging, validation, or error handling for different types of requests.

However, it's also important to keep in mind the principle of DRY (Don't Repeat Yourself). If you find that you're writing the same code in multiple pipeline behaviors, it might be a sign that you could refactor that common code into a shared method or a base class.

In the end, the best approach depends on the specific requirements of your project. It's always a good idea to discuss these kinds of design decisions with your team to make sure everyone is on the same page.