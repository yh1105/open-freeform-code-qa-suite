The issue you're experiencing is likely due to the fact that Spring Boot, by default, uses Jackson for JSON serialization/deserialization, but does not include a library for XML serialization/deserialization. 

To enable XML support, you need to add the Jackson Dataformat XML library to your project. If you're using Maven, you can add the following dependency to your `pom.xml`:

```xml
<dependency>
    <groupId>com.fasterxml.jackson.dataformat</groupId>
    <artifactId>jackson-dataformat-xml</artifactId>
</dependency>
```

If you're using Gradle, add the following to your `build.gradle`:

```groovy
implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
```

After adding this dependency, Spring should be able to automatically configure Jackson to support XML when it sees this library on the classpath.

However, note that even with this library, not all features of XML can be handled as well as they can be with JSON. For example, XML namespaces and certain types of complex nested structures can be more difficult to handle. If you need to work with complex XML, you might need to use a more powerful XML processing library like JAXB.