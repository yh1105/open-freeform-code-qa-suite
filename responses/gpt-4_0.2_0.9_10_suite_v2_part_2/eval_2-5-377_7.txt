The problem is that you are trying to format a `LocalDate` object which does not contain time information. You should use `ZonedDateTime` or `LocalDateTime` instead. 

Here is a corrected version of your code:

```java
import java.time.*;
import java.time.format.DateTimeFormatter;
import java.util.*;

public class Main {
    public static void main(String[] args) {
        System.out.println(generateRandomDateAndTimeInString());
    }

    public static String generateRandomDateAndTimeInString() {
        LocalDateTime dateTime = LocalDateTime.now().minusDays(new Random().nextInt(365 * 70));
        System.out.println("date and time :: " + dateTime.toString());
        return formatDate(dateTime);
    }

    public static String formatDate(LocalDateTime dateTime){
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss'Z'");
        return dateTime.atZone(ZoneId.systemDefault()).withZoneSameInstant(ZoneOffset.UTC).format(formatter);
    }
}
```

In this code, I've used `LocalDateTime` to generate a random date and time. Then, I've used `DateTimeFormatter` to format the date and time in the desired format. 

The `atZone(ZoneId.systemDefault()).withZoneSameInstant(ZoneOffset.UTC)` part is used to convert the date and time to UTC (which is represented by 'Z' in the date-time format). 

Please note that this code will generate a random date and time in the past 70 years from now. If you want to generate a completely random date and time, you may need to adjust the code accordingly.