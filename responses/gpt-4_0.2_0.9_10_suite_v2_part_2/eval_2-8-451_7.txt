Yes, Go modules do support this. Here's how you can do it:

First, you need to copy your `go.mod` and `go.sum` files into the Docker container. These files serve as your "dependency manifest". Then, you can download your dependencies using the `go mod download` command. This will cache the dependencies as a separate Docker layer.

Here's a sample Dockerfile that demonstrates this:

```Dockerfile
# Start from the latest golang base image
FROM golang:latest as builder

# Add Maintainer Info
LABEL maintainer="Your Name <youremail@domain.com>"

# Set the Current Working Directory inside the container
WORKDIR /app

# Copy go mod and sum files 
COPY go.mod go.sum ./

# Download all dependencies. Dependencies will be cached if the go.mod and go.sum files are not changed 
RUN go mod download

# Copy the source from the current directory to the Working Directory inside the container 
COPY . .

# Build the Go app
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main .

######## Start a new stage from scratch #######
FROM alpine:latest  

RUN apk --no-cache add ca-certificates

WORKDIR /root/

# Copy the Pre-built binary file from the previous stage
COPY --from=builder /app/main .

# Expose port 8080 to the outside world
EXPOSE 8080

# Command to run the executable
CMD ["./main"] 
```

In the above Dockerfile, the `go mod download` command will be cached as long as the `go.mod` and `go.sum` files do not change. This will speed up your Docker builds if your dependencies don't change often.