In your code, you are wrapping the string "123" in a `JsonResult` object, and then wrapping that `JsonResult` object in an `OkObjectResult` object. This is why you are seeing the extra properties in your response.

The `Ok` method of the base `Controller` class in ASP.NET Core already returns a `JsonResult` with a status code of 200. So, you don't need to wrap your data in a `Json` method call. You can just pass your data directly to the `Ok` method.

Here is how you can modify your code:

```csharp
public ActionResult IsAuthenticated()
{
    return Ok("123");
}
```

This will return the following JSON response with a status code of 200:

```json
"123"
```

If you want to return a JSON object, you can pass an anonymous object or a dictionary to the `Ok` method:

```csharp
public ActionResult IsAuthenticated()
{
    return Ok(new { value = "123" });
}
```

This will return the following JSON response with a status code of 200:

```json
{
    "value": "123"
}
```