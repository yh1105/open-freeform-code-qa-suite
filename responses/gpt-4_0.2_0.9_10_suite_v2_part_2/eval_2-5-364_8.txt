The Java version used by Maven can be set in the `JAVA_HOME` environment variable. If you're using the Maven Wrapper (`mvnw` or `mvnw.cmd`), it will use the Java version specified in `JAVA_HOME`.

Here's how you can set `JAVA_HOME`:

**On Windows:**

1. Right-click on 'My Computer' and select 'Properties'.
2. Click on 'Advanced System Settings'.
3. Click on 'Environment Variables'.
4. Click on 'New' under System Variables.
5. Enter `JAVA_HOME` as the variable name.
6. Enter the path to your JDK installation as the variable value (e.g., `C:\Program Files\Java\jdk1.8.0_201`).
7. Click 'OK' and restart your command prompt.

**On Linux/Mac:**

1. Open your terminal.
2. Open `~/.bashrc` or `~/.bash_profile` or `~/.zshrc` file depending on your shell.
3. Add the following line at the end of the file: `export JAVA_HOME="/usr/lib/jvm/java-8-oracle"`
   (Replace `"/usr/lib/jvm/java-8-oracle"` with the path to your actual JDK installation)
4. Save the file and exit.
5. Run `source ~/.bashrc` or `source ~/.bash_profile` or `source ~/.zshrc` to reload the profile.
6. Verify the setup by running `echo $JAVA_HOME` in the terminal. It should display the path you just set.

Remember to replace the paths in the above steps with the actual path where your JDK is installed. 

If you're using a build system like Jenkins, you can also set the `JAVA_HOME` environment variable in the job configuration.

If you're using a CI/CD system like GitHub Actions or GitLab CI/CD, you can set the `JAVA_HOME` environment variable in the workflow or pipeline configuration file.