The error message you're seeing indicates that Go is unable to find the specific version of the `key-protect-client` module in your private repository. This could be due to a number of reasons, but here are a few things you can try to debug this issue:

1. **Check the version of Go you're using on both computers.** Make sure you're using the same version of Go on both computers. If you're using different versions, it could be that the version on computer B doesn't support some features that are used in your project.

    ```bash
    go version
    ```

2. **Check your GOPRIVATE environment variable.** If you're using private repositories, you should set the `GOPRIVATE` environment variable to tell Go to not use the public proxy for these modules. You can set it to the root of your private repositories like so:

    ```bash
    export GOPRIVATE=github.ibm.com/kms/*
    ```

3. **Check your Git configuration.** Make sure that Git is configured correctly on computer B. You can check your Git configuration with the following command:

    ```bash
    git config --list
    ```

    Look for the `user.name` and `user.email` settings and make sure they're set to the same values as on computer A.

4. **Check your network connection.** If you're on a different network on computer B, there could be a network issue that's preventing Go from downloading the modules. Try switching to a different network and see if that helps.

5. **Try to manually clone the repository.** Try to manually clone the `key-protect-client` repository on computer B. This can help you figure out if the issue is with Go or with your Git configuration.

    ```bash
    git clone https://github.ibm.com/kms/key-protect-client.git
    ```

6. **Check the access rights.** Even though your GitHub credentials give you access to these repos, make sure that the specific version (v0.1.5) of the `key-protect-client` module is accessible from your account.

7. **Clear the Go module cache.** Sometimes, the Go module cache can get corrupted, which can cause issues like this. You can clear the Go module cache with the following command:

    ```bash
    go clean -modcache
    ```

    After running this command, try to build your