You can use the factory pattern to create multiple instances of `ServiceBusClient` and `ServiceBusSender` with different configurations. Here's an example of how you can do it:

First, create a factory interface and its implementation:

```csharp
public interface IServiceBusClientFactory
{
    ServiceBusSender CreateSender(string queueName);
}

public class ServiceBusClientFactory : IServiceBusClientFactory
{
    private readonly string _connectionString;

    public ServiceBusClientFactory(string connectionString)
    {
        _connectionString = connectionString;
    }

    public ServiceBusSender CreateSender(string queueName)
    {
        var client = new ServiceBusClient(_connectionString, new ServiceBusClientOptions
        {
            TransportType = ServiceBusTransportType.AmqpWebSockets
        });

        return client.CreateSender(queueName);
    }
}
```

Then, register the factory in your DI container:

```csharp
_services.AddSingleton<IServiceBusClientFactory>(sp =>
{
    var serviceBusConfiguration = sp.GetRequiredService<IOptions<UserEventConsumerSetting>>().Value;
    return new ServiceBusClientFactory(serviceBusConfiguration.ServiceBusConnectionString);
});
```

Now, you can inject the factory into your service and create `ServiceBusSender` instances with different queue names:

```csharp
public class CarReservationMessagingService
{
    private readonly IServiceBusClientFactory _serviceBusClientFactory;

    public CarReservationMessagingService(IServiceBusClientFactory serviceBusClientFactory)
    {
        _serviceBusClientFactory = serviceBusClientFactory;
    }

    public async Task PublishNewCarReservationMessageAsync(CarReservation carReservation, string queueName)
    {
        var serviceBusSender = _serviceBusClientFactory.CreateSender(queueName);

        // ... rest of your code
    }
}
```

In this example, `queueName` is passed as a parameter to the `PublishNewCarReservationMessageAsync` method. You can adjust this according to your needs. For example, you can store the queue names in your configuration and inject `IOptions` or `IConfiguration` into your service to access them.