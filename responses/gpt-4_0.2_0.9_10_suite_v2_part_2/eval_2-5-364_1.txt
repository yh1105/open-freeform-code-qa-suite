If you're using a build system like Jenkins or Azure DevOps, you can specify the Java version you want to use in your pipeline configuration. However, if you're running Maven locally and want to use a specific Java version, you can set the `JAVA_HOME` environment variable to point to the JDK you want to use.

Here's how you can do it:

1. Find out where your desired JDK is installed. This will be the directory containing the `bin`, `lib`, etc. directories. For example, it might be something like `/usr/lib/jvm/java-11-openjdk-amd64`.

2. Set the `JAVA_HOME` environment variable to point to this directory. How you do this depends on your operating system:

   - On Unix-based systems (like Linux or Mac), you can add the following line to your shell profile file (like `~/.bashrc` or `~/.zshrc`):

     ```bash
     export JAVA_HOME=/path/to/your/jdk
     ```

     Then, run `source ~/.bashrc` (or `~/.zshrc`, depending on your shell) to apply the changes.

   - On Windows, you can set the `JAVA_HOME` variable in the System Properties. Here's how:

     1. Right-click on 'Computer' and select 'Properties'.
     2. Select 'Advanced system settings'.
     3. In the 'System Properties' window, select 'Environment Variables'.
     4. Click 'New' under 'System variables'.
     5. Enter `JAVA_HOME` as the variable name and the path to your JDK as the variable value.
     6. Click 'OK' and 'Apply'.

3. Now, when you run Maven, it should use the JDK you specified.

Remember, the Maven Wrapper (`mvnw` or `mvnw.cmd`) will use the version of Java specified by the `JAVA_HOME` environment variable. If `JAVA_HOME` is not set, it will use the Java version on the system path.