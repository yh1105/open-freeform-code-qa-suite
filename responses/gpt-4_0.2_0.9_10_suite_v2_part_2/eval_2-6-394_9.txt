To inject a generic interface in .NET Core, you need to create a concrete class that implements the generic interface. Then, you can register the concrete class with the dependency injection container in your `Startup.cs` file.

Here's an example:

```c#
public class DatabaseService<T> : IDatabaseService<T>
{
    public IEnumerable<T> GetList()
    {
        // Implementation here
    }
    ...
}
```

Then, in your `Startup.cs`:

```c#
services.AddScoped(typeof(IDatabaseService<>), typeof(DatabaseService<>));
```

This way, you're telling .NET Core to resolve `IDatabaseService<T>` by creating an instance of `DatabaseService<T>`.

Then, in your controller, you can inject the service like this:

```c#
public class MyController : Controller
{
    private readonly IDatabaseService<MyEntity> _service;

    public MyController(IDatabaseService<MyEntity> service)
    {
        _service = service;
    }

    ...
}
```

In this case, `MyEntity` is the type you want to use with your `IDatabaseService<T>`.