The problem you're facing is due to the fact that you're trying to format a `LocalDate` object which only contains date information (year, month, day), not time information (hour, minute, second). The format you're trying to apply `"yyyy-MM-dd'T'HH:mm:ss'Z'"` requires both date and time information.

To solve this, you should use `ZonedDateTime` or `LocalDateTime` instead of `LocalDate`. Here is the corrected code:

```java
import java.time.*;
import java.time.format.DateTimeFormatter;
import java.util.*;

public class Main {
    public static void main(String[] args) {
        System.out.println(generateRandomDateAndTimeInString());
    }

    public static String generateRandomDateAndTimeInString() {
        LocalDateTime dateTime = LocalDateTime.now().minusDays(new Random().nextInt(365 * 70));
        System.out.println("date and time :: " + dateTime.toString());
        return formatDate(dateTime);
    }

    public static String formatDate(LocalDateTime dateTime){
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss'Z'");
        return dateTime.atZone(ZoneId.systemDefault()).format(formatter);
    }
}
```

In this code, `LocalDateTime.now().minusDays(new Random().nextInt(365 * 70))` generates a random date and time in the past 70 years. `DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss'Z'")` is used to format the date and time. `dateTime.atZone(ZoneId.systemDefault())` is used to convert `LocalDateTime` to `ZonedDateTime` because 'Z' in the format requires a time-zone.

Please note that 'Z' in the date time format stands for the Zulu time zone, which is equivalent to UTC. If you want the date time string to be in UTC, you should convert the local date time to a ZonedDateTime with UTC as the zone:

```java
return dateTime.atZone(ZoneId.of("UTC")).format(formatter);
```