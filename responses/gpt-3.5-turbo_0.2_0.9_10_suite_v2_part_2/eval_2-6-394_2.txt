You can use an open generic registration to register a generic interface with a specific implementation. Here's an example of how to register `IDatabaseService<T>` with `DatabaseService<T>` implementation:

```c#
services.AddScoped(typeof(IDatabaseService<>), typeof(DatabaseService<>));
```

This registers `IDatabaseService<T>` as a service with an open generic type `IDatabaseService<>`, and `DatabaseService<T>` as its implementation with an open generic type `DatabaseService<>`. 

Now, when you inject `IDatabaseService<T>` into your controllers, the container will automatically resolve it to `DatabaseService<T>`.