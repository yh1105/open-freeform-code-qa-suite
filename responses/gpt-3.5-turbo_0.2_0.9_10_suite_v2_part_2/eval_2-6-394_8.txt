You can use an open generic type to register a generic interface with a dependency injection container. Here's an example of how to register your `IDatabaseService<T>` interface with the `IServiceCollection` in your `Startup.cs` file:

```c#
services.AddScoped(typeof(IDatabaseService<>), typeof(DatabaseService<>));
```

This registers the open generic type `IDatabaseService<>` with the closed generic type `DatabaseService<>`. Now, when you inject `IDatabaseService<T>` into your controllers, the dependency injection container will automatically resolve the appropriate closed generic type based on the type parameter `T` that you specify.

For example, if you have a `DatabaseService<Customer>` class that implements `IDatabaseService<Customer>`, you can inject it into your controller like this:

```c#
public class MyController : Controller
{
    private readonly IDatabaseService<Customer> _databaseService;

    public MyController(IDatabaseService<Customer> databaseService)
    {
        _databaseService = databaseService;
    }

    // ...
}
```

The dependency injection container will automatically resolve the `DatabaseService<Customer>` class and inject it into your controller.