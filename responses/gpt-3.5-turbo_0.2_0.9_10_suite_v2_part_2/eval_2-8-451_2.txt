Yes, Go modules (formerly known as vgo) also supports separate stages for dependency installation and binary building. This can be achieved by using the `go mod download` command to download all dependencies and then copying the `go.mod` and `go.sum` files to a separate stage in your Dockerfile. 

Here's an example Dockerfile:

```
# Stage 1: Download dependencies
FROM golang:1.11-alpine AS build
WORKDIR /app
COPY go.mod go.sum ./
RUN go mod download

# Stage 2: Build binary
FROM build AS compile
COPY . .
RUN go build -o myapp

# Stage 3: Final image
FROM alpine:latest
COPY --from=compile /app/myapp /usr/local/bin/
CMD ["myapp"]
```

In this example, the first stage downloads all dependencies using `go mod download`, and the resulting `go.mod` and `go.sum` files are copied to the second stage. The second stage builds the binary using the downloaded dependencies, and the final stage copies the binary from the second stage and runs it.

By separating the dependency installation and binary building stages, you can take advantage of Docker's layer caching and speed up rebuilds when only dependencies have changed.