You can use an open generic type to register a generic interface with a dependency injection container. Here's an example of how to register your `IDatabaseService<T>` interface with the `IServiceCollection` in your `Startup.cs` file:

```c#
services.AddScoped(typeof(IDatabaseService<>), typeof(DatabaseService<>));
```

This registers `IDatabaseService<T>` as a scoped service with the implementation `DatabaseService<T>`. The `<>` syntax is used to indicate that this is an open generic type.

Then, when you want to use the `IDatabaseService<T>` interface in your controller, you can inject it like this:

```c#
public class MyController : Controller
{
    private readonly IDatabaseService<MyModel> _databaseService;

    public MyController(IDatabaseService<MyModel> databaseService)
    {
        _databaseService = databaseService;
    }

    // ...
}
```

In this example, `MyModel` is the type parameter that you want to use with the `IDatabaseService<T>` interface. The dependency injection container will automatically resolve the `IDatabaseService<MyModel>` dependency and pass it to the controller's constructor.