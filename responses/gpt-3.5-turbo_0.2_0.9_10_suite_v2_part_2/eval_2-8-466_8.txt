To use the `promhttp` library with the Gin framework, you can create a new `gin.Engine` instance and register the `promhttp.Handler()` as a middleware. Here is an example:

```go
package main

import (
    "log"

    "github.com/gin-gonic/gin"
    "github.com/prometheus/client_golang/prometheus"
    "github.com/prometheus/client_golang/prometheus/promhttp"
)

var cpuTemp = prometheus.NewGauge(prometheus.GaugeOpts{
    Name: "cpu_temperature_celsius",
    Help: "Current temperature of the CPU.",
})

func init() {
    // Metrics have to be registered to be exposed:
    prometheus.MustRegister(cpuTemp)
}

func main() {
    cpuTemp.Set(65.3)

    // Create a new gin engine
    r := gin.Default()

    // Register the prometheus middleware
    r.Use(prometheusMiddleware())

    // Define a route
    r.GET("/", func(c *gin.Context) {
        c.JSON(200, gin.H{
            "message": "Hello World!",
        })
    })

    // Start the server
    if err := r.Run(":8080"); err != nil {
        log.Fatal("Unable to start server: ", err)
    }
}

func prometheusMiddleware() gin.HandlerFunc {
    return func(c *gin.Context) {
        if c.Request.URL.Path == "/metrics" {
            promhttp.Handler().ServeHTTP(c.Writer, c.Request)
            c.Abort()
            return
        }
        c.Next()
    }
}
```

In this example, we create a new `gin.Engine` instance and register the `prometheusMiddleware()` function as a middleware using the `r.Use()` method. The `prometheusMiddleware()` function checks if the requested URL is `/metrics` and, if so, serves the metrics using the `promhttp.Handler()`. If the URL is not `/metrics`, the middleware calls `c.Next()` to pass the request to the next middleware or route handler.