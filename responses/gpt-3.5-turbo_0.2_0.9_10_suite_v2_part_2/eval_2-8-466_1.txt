To use the Prometheus metrics handler with the Gin framework, you can create a new `gin.Engine` instance and register the Prometheus metrics handler with the `/metrics` endpoint. Here's an example:

```go
package main

import (
    "log"

    "github.com/gin-gonic/gin"
    "github.com/prometheus/client_golang/prometheus"
    "github.com/prometheus/client_golang/prometheus/promhttp"
)

var cpuTemp = prometheus.NewGauge(prometheus.GaugeOpts{
    Name: "cpu_temperature_celsius",
    Help: "Current temperature of the CPU.",
})

func init() {
    // Metrics have to be registered to be exposed:
    prometheus.MustRegister(cpuTemp)
}

func main() {
    cpuTemp.Set(65.3)

    // Create a new Gin router
    r := gin.Default()

    // Register the Prometheus metrics handler with the /metrics endpoint
    r.GET("/metrics", gin.WrapH(promhttp.Handler()))

    // Start the server
    if err := r.Run(":8080"); err != nil {
        log.Fatalf("Failed to start server: %v", err)
    }
}
```

In this example, we create a new `gin.Engine` instance and register the Prometheus metrics handler with the `/metrics` endpoint using `gin.WrapH(promhttp.Handler())`. This creates a Gin handler function that wraps the Prometheus metrics handler, allowing it to be used with the Gin framework.

Note that we also use `gin.Default()` to create a new Gin router with some default middleware, such as request logging and recovery from panics. You can customize this middleware as needed for your application.